## b. PCA ----
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(vegan)
library("ape")
fticr_pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_longform.csv"
fticr_pore_pca =
fticr_pore_raw_long %>%
#  filter(tension=="1.5 kPa") %>%
dplyr::mutate(presence = case_when(intensity>0~1)) %>%
dplyr::select(core,Mass,tension,site,treatment,presence) %>%
spread(Mass,presence)
fticr_pca_num =
fticr_pore_pca %>%
dplyr::select(.,-(1:4)) %>%
replace(.,is.na(.),0)
fticr_pca_grp =
fticr_pore_pca %>%
dplyr::select(.,(1:4)) %>%
dplyr::mutate(row = row_number())
df_f <- fticr_pca_num[,apply(fticr_pca_num, 2, var, na.rm=TRUE) != 0]
pca = prcomp(df_f, scale. = T)
summary(pca)
ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = fticr_pca_grp$treatment, ellipse = TRUE, circle = TRUE,
var.axes = FALSE)
### unique to each site ---- pores ----
fticr_pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_longform.csv"
fticr_pore_meta = read.csv(FTICR_PORE_META)
unique_pore_temp =
fticr_pore_raw_long %>%
#  filter(reps==5) %>%
group_by(Mass, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
filter(treatment=="time zero saturation") %>%
group_by(Mass,tension) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
unique_pore =
unique_pore_temp %>%
filter(reps==1)
common_pore =
unique_pore_temp %>%
filter(reps>1)
gg_vankrev(unique_pore, aes(x = OC, y = HC, color = site))+facet_wrap(~tension)
gg_vankrev(unique_pore_temp, aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_wrap(tension~reps)+
theme_kp()
gg_vankrev(molform[molform$treatment=="time zero saturation",], aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_wrap(treatment+tension~reps)
molform =
fticr_pore_raw_long %>%
left_join(molform_temp, by = "Mass") %>%
group_by(MolForm, core, site, treatment, tension) %>%
dplyr::summarise() %>%
group_by(MolForm, site, treatment, tension) %>%
dplyr::summarise(reps=n()) %>%
left_join(dplyr::select(molform_temp, MolForm, HC, OC), by = "MolForm")
molform_temp =
molform_temp %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
unique_pore_temp =
molform %>%
#  filter(reps==5) %>%
group_by(MolForm, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
filter(treatment=="time zero saturation") %>%
group_by(MolForm,tension) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(molform_temp, MolForm, HC, OC), by = "MolForm")
unique_pore
unique_pore_temp
View(unique_pore)
molform =
fticr_pore_raw_long %>%
left_join(molform_temp, by = "Mass") %>%
group_by(MolForm, core, site, treatment, tension) %>%
dplyr::summarise() %>%
group_by(MolForm, site, treatment, tension) %>%
dplyr::summarise(reps=n()) %>%
left_join(dplyr::select(molform_temp, MolForm, HC, OC), by = "MolForm")
unique_pore_temp =
molform %>%
#  filter(reps==5) %>%
group_by(MolForm, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
filter(treatment=="time zero saturation") %>%
group_by(MolForm,tension) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(molform_temp, MolForm, HC, OC), by = "MolForm")
unique_pore_temp =
fticr_pore_raw_long %>%
#  filter(reps==5) %>%
group_by(Mass, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
#filter(treatment=="time zero saturation") %>%
group_by(Mass,tension, treatment) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
# trying to track molecules. only peaks that were initially unique to each site are plotted across the treatments
# not sure if this even makes sense. remove?
temp =
unique_pore_temp %>%
dplyr::mutate(remove=case_when((treatment=="time zero saturation" & reps==1)~"keep")) %>%
ungroup %>%
dplyr::select(Mass, tension, site, remove) %>%
na.omit()
unique_pore_temp =
unique_pore_temp %>%
left_join(temp,  by = c("Mass","tension","site"))
gg_vankrev(unique_pore_temp, aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_grid(treatment~reps)
soil_meta = read.csv(FTICR_SOIL_META)# <- "fticr/fticr_soil_meta.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
# PART V: POREWATER PEAKS ----
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
# we need to combine the total value into the existing groups column
ungroup %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)-> # combine all the groups+total into a single column
fticr_pore_peaks
### OUTPUT
write_csv(fticr_pore_peaks,FTICR_PORE_PEAKS)
#
# PART VI: PORE UNIQUE PEAKS ----
pore_long %>%
spread(treatment, intensity) %>%
# add columns for new/lost molecules
dplyr::mutate(drought2 = case_when(!is.na(drought)&is.na(`time zero saturation`) ~ "new",
is.na(drought)&!is.na(`time zero saturation`) ~ "lost"),
fm2 = case_when(!is.na(`field moist`)&is.na(`time zero saturation`) ~ "new",
is.na(`field moist`)&!is.na(`time zero saturation`) ~ "lost"),
saturation2 = case_when(!is.na(saturation)&is.na(`time zero saturation`) ~ "new",
is.na(saturation)&!is.na(`time zero saturation`) ~ "lost")) %>%
# add columns for unique peaks
dplyr:: mutate(unique = case_when((drought2=="new" & is.na(fm2) & is.na(saturation2)) ~ "drought",
(saturation2=="new" & is.na(fm2) & is.na(drought2)) ~ "saturation",
(fm2=="new" & is.na(drought2) & is.na(saturation2)) ~ "field moist")) %>%
dplyr::select(-drought, -saturation, -`field moist`,-`time zero saturation`)->
pore_unique_peaks
### OUTPUT
write.csv(pore_unique_peaks,FTICR_PORE_UNIQUE, row.names = FALSE)
#
# PART VII: PORE AROMATIC PEAKS ----
meta_aromatic <- pore_meta %>%
dplyr::select(Mass, AImod) %>%
dplyr::rename(AI_Mod = AImod)
pore_raw_long %>%
left_join(meta_aromatic, by = "Mass") %>%
# create a column designating aromatic  vs. aliphatic
# aromatic == AI_Mod > 0.5, aliphatic == 1.5 < HC < 2.0
# see Bailey et al. 2017 SBB, Chasse et al. 2015 for references
dplyr::mutate(aromatic = case_when(AI_Mod>0.5 ~ "aromatic",
(HC<2.0 & HC>1.5) ~ "aliphatic"))  ->
pore_aromatic
pore_aromatic %>%
drop_na %>%
group_by(tension,site, treatment, core, aromatic) %>%
dplyr::summarize(counts = n())->
pore_aromatic_counts
## b. stats for aromatic peaks (Dunnett's test) ----
fit_dunnett_aromatic_pore <- function(dat) {
d <-DescTools::DunnettTest(counts~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(drought = d$`time zero saturation`["drought-time zero saturation",4],
saturation = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
pore_aromatic_temp =
pore_aromatic_counts %>%
filter(aromatic=="aromatic") %>%
group_by(site,tension) %>%
do(fit_dunnett_aromatic_pore(.)) %>%
melt(id = c("tension","site"), value.name = "dunnett", variable.name = "treatment")
pore_aromatic_summary =
pore_aromatic_counts %>%
filter(aromatic=="aromatic") %>%
group_by(site, treatment, tension) %>%
dplyr::summarise(counts_mean = as.integer(mean(counts)),
counts_se = sd(counts)/sqrt(n())) %>%
left_join(pore_aromatic_temp, by = c("site","treatment","tension"), all.x=TRUE)
### OUTPUT
# write.csv(fticr_soil_aromatic_counts,"fticr_soil_aromatic_counts.csv")
write_csv(pore_aromatic_counts, FTICR_PORE_AROMATIC)
write_csv(pore_aromatic_summary, FTICR_PORE_AROMATIC_SUMMARY)
FTICR_PORE_AROMATIC_SUMMARY = "fticr/pore_aromatic_summary.csv"
FTICR_PORE_AROMATIC_SUMMARY = "fticr/pore_aromatic_summary.csv"
write_csv(pore_aromatic_summary, FTICR_PORE_AROMATIC_SUMMARY)
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = n()) %>% # sum all COUNTS for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
relabund_temp%>%
# now summarize by treatment. combine cores
ungroup %>%
dplyr::group_by(tension,site, treatment, Class) %>%
dplyr::summarize(relabund2 = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
# create a column of relabund +/- se
dplyr::mutate(relabund = paste(round(relabund2,2),"\u00B1",round(se,2))) %>%
# we need to add a total column
dplyr::mutate(total = 100) %>%
dplyr::select(-se) ->
pore_relabund
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(drought = d$`time zero saturation`["drought-time zero saturation",4],
saturation = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="Other",] %>%
ungroup %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
pore_relabund %>%
left_join(pore_relabund_dunnett,by = c("tension","site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett)->
fticr_pore_relabundance
### OUTPUT
write.csv(fticr_pore_relabundance, FTICR_PORE_RELABUND)
# PART V: SHANNON DIVERSITY ----
# Shannon diversity, H = - sum [p*ln(p)], where n = no. of individuals per species/total number of individuals
## a. for pores ----
pore_raw_long %>%
group_by(tension,site,treatment, core,Class) %>%
dplyr::summarize(n = n()) %>%
ungroup %>%
group_by(tension,site,treatment,core) %>%
dplyr::mutate(total = sum(n),
p = n/total,
log = log(p),
p_logp = p*log) %>%
dplyr::summarize(H1 = sum(p_logp),
H = round(-1*H1, 2)) %>%
dplyr::select(-H1)->pore_shannon
fit_dunnett_shannon_pore <- function(dat) {
d <-DescTools::DunnettTest(H~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(drought = d$`time zero saturation`["drought-time zero saturation",4],
saturation = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
pore_shannon_temp =
pore_shannon %>%
group_by(site,tension) %>%
do(fit_dunnett_shannon_pore(.)) %>%
melt(id = c("tension","site"), value.name = "dunnett", variable.name = "treatment")
pore_shannon_summary =
pore_shannon %>%
group_by(site, treatment, tension) %>%
dplyr::summarise(H_mean = (mean(H)),
H_se = sd(H)/sqrt(n())) %>%
left_join(pore_shannon_temp, by = c("site","treatment","tension"), all.x=TRUE)
### OUTPUT
write.csv(pore_shannon, FTICR_PORE_DIVERSITY)
write.csv(pore_shannon_summary, "fticr/pore_diversity_summary.csv")
pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
#
## 1b. process files for analysis ----
# we want relative abundance for each core
## pores ----
relabund_temp =
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = n()) %>% # sum all COUNTS for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)
relabund_pore =
relabund_temp %>%
dplyr::select(core, site, tension, treatment, Class, relabund) %>%
spread(Class, relabund) %>%
replace(is.na(.),0)
pore_relabund_pca=
relabund_temp %>%
ungroup %>%
dplyr::select(core,tension, site, treatment, Class, relabund) %>%
#filter(treatment=="time zero saturation") %>%
filter(tension=="50 kPa") %>%
spread(Class, relabund) %>%
replace(.,is.na(.),0)
pore_relabund_pca_num =
pore_relabund_pca %>%
dplyr::select(.,-(1:4))
pore_relabund_pca_grp =
pore_relabund_pca %>%
dplyr::select(.,(1:4)) %>%
dplyr::mutate(row = row_number())
pca = prcomp(pore_relabund_pca_num, scale. = T)
summary(pca)
ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = pore_relabund_pca_grp$site, ellipse = F, circle = F,
var.axes = TRUE)+
geom_point(size=2,stroke=2, aes(color = pore_relabund_pca_grp$treatment, shape = pore_relabund_pca_grp$site))+
geom_text(label = pore_relabund_pca_grp$core)+
scale_shape_manual(values = c(19,4,7))+
#facet_wrap(~groups)+
ggtitle("fine pores")
adonis(pore_relabund_pca_num ~ pore_relabund_pca$site+pore_relabund_pca$treatment+pore_relabund_pca$site:pore_relabund_pca$treatment,
method="bray", permutations=999)
pore_relabund_pca=
relabund_temp %>%
ungroup %>%
dplyr::select(core,tension, site, treatment, Class, relabund) %>%
#filter(treatment=="time zero saturation") %>%
filter(tension=="1.5 kPa") %>%
spread(Class, relabund) %>%
replace(.,is.na(.),0)
pore_relabund_pca_num =
pore_relabund_pca %>%
dplyr::select(.,-(1:4))
pore_relabund_pca_grp =
pore_relabund_pca %>%
dplyr::select(.,(1:4)) %>%
dplyr::mutate(row = row_number())
pca = prcomp(pore_relabund_pca_num, scale. = T)
summary(pca)
ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = pore_relabund_pca_grp$site, ellipse = F, circle = F,
var.axes = TRUE)+
geom_point(size=2,stroke=2, aes(color = pore_relabund_pca_grp$treatment, shape = pore_relabund_pca_grp$site))+
scale_shape_manual(values = c(19,4,7))+
geom_text(label = pore_relabund_pca_grp$core)+
#facet_wrap(~groups)+
ggtitle("coarse pores")
source("0b-packages.R")
# FTICR -- relative abundance files
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
View(pore_relabund)
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("1.5 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
total = 100%
```{r relabund_1, echo=FALSE, warning=FALSE,message=FALSE,fig.cap="relabund 1.5 kPa"}
print("1.5 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_shannon_summary %>%
dplyr::mutate(H = paste(round(H_mean,2), "\U00B1", round(H_se,2), dunnett),
H = str_replace_all(H, "NA",""),
var = paste(tension, site)) %>%
dplyr::select(treatment, var, H) %>%
spread(var, H) %>%
knitr::kable()
pore_shannon_summary = read.csv("fticr/pore_diversity_summary.csv")
pore_shannon_summary %>%
dplyr::mutate(H = paste(round(H_mean,2), "\U00B1", round(H_se,2), dunnett),
H = str_replace_all(H, "NA",""),
var = paste(tension, site)) %>%
dplyr::select(treatment, var, H) %>%
spread(var, H) %>%
knitr::kable()
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
filter(Class=="total") %>%
knitr::kable(align = "r")
pore_peaks %>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
filter(Class=="total") %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other"))) %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other")))
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other"))) %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
source("0-packages.R")
