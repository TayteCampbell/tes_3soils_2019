soil_relabund
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["time zero saturation-baseline",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
soil_relabund_dunnett
View(soil_relabund_dunnett)
soil_relabund %>%
left_join(soil_relabund_dunnett,by = c("site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett)->
fticr_soil_relativeabundance
View(fticr_soil_relativeabundance)
soil_raw_long %>%
group_by(site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
relabund_temp%>%
# now summarize by treatment. combine cores
ungroup %>%
dplyr::group_by(site, treatment, Class) %>%
dplyr::summarize(relabund2 = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
# create a column of relabund +/- se
dplyr::mutate(relabund = paste(round(relabund2,2),"\u00B1",round(se,2))) %>%
# we need to add a total column
dplyr::mutate(total = 100) %>%
dplyr::select(-se) ->
soil_relabund
soil_relabund
soil_relabund %>%
left_join(soil_relabund_dunnett,by = c("site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett))
soil_relabund %>%
left_join(soil_relabund_dunnett,by = c("site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett)
soil_relabund %>%
left_join(soil_relabund_dunnett,by = c("site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett) ->
fticr_soil_relativeabundance
View(fticr_soil_relativeabundance)
### OUTPUT ----
write_csv(fticr_soil_relativeabundance, FTICR_SOIL_RELABUND)
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
soil_relabund
# use file fticr_pore_relabundance_summary
# first, remove the `total` row
soil_relabund %>%
dplyr::filter(!Class=="total") %>%
mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Unnamed")))->
soil_relabund
ggplot(soil_relabund, aes(x = treatment, y = relabund2, fill = Class))+
geom_bar(stat = "summary", width = 0.9)+
#scale_fill_brewer(palette = "Dark2")+
scale_fill_viridis_d(option = "inferno")+
xlab("")+
ylab("% relative abundance")+
facet_grid(~site)+
theme_bw()+
theme_kp()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
soil_nosc %>%
mutate(treatment = factor(treatment,
levels = c("baseline","time zero saturation", "field moist","drought","saturation")))->
soil_nosc
ggplot(soil_nosc,
aes(x = NOSC, fill = treatment, color = treatment))+
geom_histogram(binwidth = 0.10, position = "identity", alpha = 0.2)+
scale_fill_brewer(palette = "Dark2")+
scale_color_brewer(palette = "Dark2")+
# scale_fill_manual(values = c("#666666","#1B9E77", "#D95F02", "#7570B3"))+
#  scale_color_manual(values = c("#666666","#1B9E77", "#D95F02", "#7570B3"))+
#geom_histogram(data = subset(fticr_pore_nosc, site = "CPCRW" | treatment=="field moist"), fill = "red", alpha = 0.2)+
xlim(-2.5, 2.5)+
ylim(0,1000)+
facet_grid(site~treatment)+ #facet with two variables
theme_bw()+
theme_kp()
soil_nosc %>%
mutate(treatment = factor(treatment,
levels = c("baseline","time zero saturation", "field moist","drought","saturation")))->
soil_nosc
ggplot(soil_nosc,
aes(x = NOSC, fill = treatment, color = treatment))+
geom_histogram(binwidth = 0.10, position = "identity", alpha = 0.2)+
scale_fill_brewer(palette = "Dark2")+
scale_color_brewer(palette = "Dark2")+
# scale_fill_manual(values = c("#666666","#1B9E77", "#D95F02", "#7570B3"))+
#  scale_color_manual(values = c("#666666","#1B9E77", "#D95F02", "#7570B3"))+
#geom_histogram(data = subset(fticr_pore_nosc, site = "CPCRW" | treatment=="field moist"), fill = "red", alpha = 0.2)+
xlim(-2.5, 2.5)+
ylim(0,1000)+
facet_grid(site~treatment)+ #facet with two variables
theme_bw()+
theme_kp()
soil_nosc %>%
group_by(site,treatment) %>%
dplyr::summarise(median = median(NOSC))->
soil_nosc_median
soil_nosc_median %>%
dplyr::mutate(sp = paste(treatment),
val = round(median,4)) %>%
dplyr::select(site,sp,val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
soil_aromatic %>%
mutate(treatment = factor(treatment,
levels = c("baseline","time zero saturation", "field moist","saturation","drought")))->
soil_aromatic
ggplot(soil_aromatic[soil_aromatic$aromatic=="aromatic",],
aes(x = site, y = counts, color = treatment, fill = treatment))+
geom_boxplot(position = "dodge", fill = "white", lwd = 1,fatten = 1)+ # fatten changes thickness of median line, lwd changes thickness of all lines
geom_dotplot(binaxis = "y",position = position_dodge(0.75),
stackdir = "center", dotsize = 0.4, color = "black")+
#scale_fill_viridis_d(option = "magma")+
#scale_color_viridis_d(option = "magma")+
scale_fill_brewer(palette = "Dark2")+
scale_color_brewer(palette = "Dark2")+
ylab("aromatic peaks")+
xlab("")+
geom_vline(xintercept = 1.5)+
geom_vline(xintercept = 2.5)+
theme_bw()+
theme_kp()
### create meta file ----
## sample data split by pore size (50 kPa and 1.5 kPa).
fticr_porewater %>%
dplyr::select(1:11) %>%
# remove compounds without class. har har.
filter(!Class=="None") %>%
# create new columns
dplyr::mutate(AImod = (1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),
NOSC =  4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),
HC = round(H/C,2),
OC = round(O/C,2))->
fticr_pore_meta
# PART II: FTICR DATA FOR POREWATER ----
## step 1: load the files ----
# the porewater file contains the Mass/Peak metadata as well as sample intensities data
fticr_porewater = read_csv("data/FTICR_INPUT_SOILPORE.csv.zip")
corekey = read.csv("data/COREKEY.csv")
### create meta file ----
## sample data split by pore size (50 kPa and 1.5 kPa).
fticr_porewater %>%
dplyr::select(1:11) %>%
# remove compounds without class. har har.
filter(!Class=="None") %>%
# create new columns
dplyr::mutate(AImod = (1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),
NOSC =  4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),
HC = round(H/C,2),
OC = round(O/C,2))->
fticr_pore_meta
# create subset for HCOC and class
fticr_pore_meta %>%
dplyr::select(Mass,HC, OC, Class)->
fticr_pore_meta_hcoc
#
### create data file ----
fticr_porewater %>%
dplyr::select(Mass, starts_with("5"), starts_with("1")) %>%
# collapse all core columns into a single column
melt(id="Mass") %>%
dplyr::rename(sample = variable,
intensity = value) %>%
# remove all peaks with intensity ==0
filter(!intensity==0) %>%
# using `sample` column, create columns for tension and core
dplyr::mutate(tension_temp = substr(sample,start=1,stop=1),
core = substr(sample,start=3,stop=7),
tension = case_when(
tension_temp=="1"~"1.5 kPa",
tension_temp=="5"~"50 kPa")) %>%
# remove unnecessary columns
dplyr::select(-tension_temp,-sample) %>%
# merge with the corekey and then remove NA containing rows
right_join(corekey, by = "core") %>%
drop_na->
temp_pore
#
### create data file ----
fticr_porewater %>%
dplyr::select(Mass, starts_with("5"), starts_with("1")) %>%
# collapse all core columns into a single column
melt(id="Mass") %>%
dplyr::rename(sample = variable,
intensity = value) %>%
# remove all peaks with intensity ==0
filter(!intensity==0) %>%
# using `sample` column, create columns for tension and core
dplyr::mutate(tension_temp = substr(sample,start=1,stop=1),
core = substr(sample,start=3,stop=7),
tension = case_when(
tension_temp=="1"~"1.5 kPa",
tension_temp=="5"~"50 kPa")) %>%
# remove unnecessary columns
dplyr::select(-tension_temp,-sample) %>%
# merge with the corekey and then remove NA containing rows
right_join(corekey, by = "core") %>%
drop_na->
temp_pore
View(fticr_porewater)
fticr_porewater %>%
dplyr::select(Mass, starts_with("5"), starts_with("1")) %>%
# collapse all core columns into a single column
melt(id="Mass")
fticr_porewater
# Create a file with the list of columns to drop.
# use the sample meta file for this. retain SampleType `sample` and `as`. (I don't know what `as` is.)
# metadata of sample information
pore_sample_meta = read.csv("data/FTICR_INPUT_SOILPORE_meta.csv")
pore_sample_meta %>%
filter(!Sample_Type=="sample") %>%
filter(!Sample_Type=="as") %>%
dplyr::rename(code = `X21T_CCS.2_Day8_1.C11_11Jan18_Leopard_Infuse.qb`) ->
# ^^^ rename the f-ing column. WTAF is this column name. Checked -- it's not because a row was moved up.
pore_sample_meta
# drop unnecessary sample columns
drops <- readLines("data/fticr_columns_to_drop2.txt")
fticr_porewater[names(fticr_porewater) %in% drops] <- NULL
matches <- regexec("[0-9]-[A-Z][0-9]{1,2}", names(fticr_porewater))
matches_n <- unlist(matches)
lengths <- sapply(matches, function(x) attr(x, "match.length"))
# extract the part of the name we want and change
names <- substr(names(fticr_porewater), matches_n, matches_n + lengths - 1)
names(fticr_porewater)[matches_n > 0] <- names[matches_n > 0]
# remove addiitonal unnecessary names that couldn't be automated above
fticr_porewater %>%
dplyr::select(-`C13`,-`3use`,-`Error_ppm`)->
fticr_porewater
fticr_porewater
### create meta file ----
## sample data split by pore size (50 kPa and 1.5 kPa).
fticr_porewater %>%
dplyr::select(1:11) %>%
# remove compounds without class. har har.
filter(!Class=="None") %>%
# create new columns
dplyr::mutate(AImod = (1+C-(0.5*O)-S-(0.5*(N+P+H)))/(C-(0.5*O)-S-N-P),
NOSC =  4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C),
HC = round(H/C,2),
OC = round(O/C,2))->
fticr_pore_meta
# create subset for HCOC and class
fticr_pore_meta %>%
dplyr::select(Mass,HC, OC, Class)->
fticr_pore_meta_hcoc
#
### create data file ----
fticr_porewater %>%
dplyr::select(Mass, starts_with("5"), starts_with("1")) %>%
# collapse all core columns into a single column
melt(id="Mass") %>%
dplyr::rename(sample = variable,
intensity = value) %>%
# remove all peaks with intensity ==0
filter(!intensity==0) %>%
# using `sample` column, create columns for tension and core
dplyr::mutate(tension_temp = substr(sample,start=1,stop=1),
core = substr(sample,start=3,stop=7),
tension = case_when(
tension_temp=="1"~"1.5 kPa",
tension_temp=="5"~"50 kPa")) %>%
# remove unnecessary columns
dplyr::select(-tension_temp,-sample) %>%
# merge with the corekey and then remove NA containing rows
right_join(corekey, by = "core") %>%
drop_na->
temp_pore
View(temp_pore)
temp_pore %>%
group_by(Mass,tension,site,treatment) %>%
dplyr::mutate(reps = n())
# remove peaks seen in < 3 replicates
temp_pore %>%
group_by(Mass,tension,site,treatment) %>%
dplyr::mutate(reps = n()) %>%
filter(reps >2) %>%
# merge with hcoc file
left_join(fticr_pore_meta_hcoc, by = "Mass") %>%
drop_na->
fticr_pore_raw_long
View(fticr_pore_raw_long)
# now create a summary by treatment
fticr_pore_raw_long %>%
group_by(Mass,tension,site,treatment) %>%
dplyr::summarise(intensity = mean(intensity)) %>%
# merge with hcoc file
left_join(fticr_pore_meta_hcoc, by = "Mass") %>%
drop_na->
fticr_pore_long
### FTICR-PORE OUTPUT ----
write.csv(fticr_pore_meta, FTICR_PORE_META, row.names = FALSE)
write.csv(fticr_pore_long, FTICR_PORE_LONG,row.names = FALSE)
write.csv(fticr_pore_raw_long, FTICR_PORE_RAW_LONG,row.names = FALSE)
View(fticr_pore_long)
fticr_pore_long %>%
group_by(tension,site,treatment, Class) %>%
dplyr::summarise(counts = n())
source("0-packages.R")
# input files
#   CHARAC
charac = read.csv(CHARACTERIZATION)# <- "processed/soil_characterization.csv"
pore = read.csv(PORE_DISTRIBUTION)# <- "processed/pore_distribution.csv"
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
wsoc_soil = read.csv(WSOC_SOIL)# <- "processed/wsoc_soils_summary.csv"
# FTICR -- longform files
soil_raw = read.csv(FTICR_SOIL_RAW_LONG)# <- "fticr/fticr_soil_raw_longform.csv"
soil_long = read.csv(FTICR_SOIL_LONG)# <- "fticr/fticr_soil_longform.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_raw = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
# FTICR -- relative abundance files
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
# FTICR -- peaks files
pore_unique = read.csv(FTICR_PORE_UNIQUE)# <- "fticr/fticr_pore_uniquemolecules.csv"
soil_unique = read.csv(FTICR_SOIL_UNIQUE)# <- "fticr/fticr_soil_uniquemolecules.csv"
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
soil_peaks = read.csv(FTICR_SOIL_PEAKS)# <- "fticr/fticr_soil_peakscount.csv"
# FTICR_PORE
pore_aromatic = read.csv(FTICR_PORE_AROMATIC)# <- "fticr/fticr_pore_aromatic_counts.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_unique_peaks = read.csv(FTICR_PORE_UNIQUE_PEAKS)# <- "fticr/fticr_pore_unique_peakscount.csv"
pore_hcoc = read.csv(FTICR_PORE_HCOC)# <- "fticr/fticr_pore_hcoc.csv"
pore_nosc = read.csv(FTICR_PORE_NOSC)# <- "fticr/fticr_pore_nosc.csv"
pore_shannon = read.csv(FTICR_PORE_DIVERSITY)# <- "fticr/fticr_pore_shannondiversity.csv"
#FTICR_SOIL
soil_aromatic = read.csv(FTICR_SOIL_AROMATIC)# <- "fticr/fticr_soil_aromatic_counts.csv"
soil_nosc = read.csv(FTICR_SOIL_NOSC)# <- "fticr/fticr_soil_nosc.csv"
soil_hcoc = read.csv(FTICR_SOIL_HCOC)# <- "fticr/fticr_soil_hcoc.csv"
soil_unique_peaks = read.csv(FTICR_SOIL_UNIQUE_PEAKS)# <- "fticr/fticr_soil_unique_peakscount.csv"
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
View(pore_peaks)
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count))
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val)
soil_meta = read.csv(FTICR_SOIL_META)# <- "fticr/fticr_soil_meta.csv"
#FTICR_SOIL_META_HCOC <- "fticr/soil_meta_hcoc.csv"
soil_raw_long = read.csv(FTICR_SOIL_RAW_LONG)# <- "fticr/fticr_soil_raw_longform.csv"
soil_long = read.csv(FTICR_SOIL_LONG)# <- "fticr/fticr_soil_longform.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n())
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
# we need to combine the total value into the existing groups column
ungroup %>%
spread(Class,peaks)
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
# we need to combine the total value into the existing groups column
ungroup %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total)
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
# we need to combine the total value into the existing groups column
ungroup %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)
pore_long %>%
group_by(tension,site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(tension,site,treatment) %>%
dplyr::mutate(total = sum(peaks))%>%  # then create a new column for sum of all peaks for each tension-site-treatment
# we need to combine the total value into the existing groups column
ungroup %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)-> # combine all the groups+total into a single column
fticr_pore_peaks
### OUTPUT
write_csv(fticr_pore_peaks,FTICR_PORE_PEAKS)
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_peaks
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
pore_peaks
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val)
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count))
pore_peaks
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("1.5 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
