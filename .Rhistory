fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(drought = d$`time zero saturation`["drought-time zero saturation",4],
saturation = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="Other",] %>%
ungroup %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
pore_relabund %>%
left_join(pore_relabund_dunnett,by = c("tension","site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett)->
fticr_pore_relabundance
View(fticr_pore_relabundance)
### OUTPUT
write.csv(fticr_pore_relabundance, FTICR_PORE_RELABUND)
source("0-packages.R")
# input files
#   CHARAC
charac = read.csv(CHARACTERIZATION)# <- "processed/soil_characterization.csv"
pore = read.csv(PORE_DISTRIBUTION)# <- "processed/pore_distribution.csv"
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
wsoc_soil = read.csv(WSOC_SOIL)# <- "processed/wsoc_soils_summary.csv"
# FTICR -- longform files
soil_raw = read.csv(FTICR_SOIL_RAW_LONG)# <- "fticr/fticr_soil_raw_longform.csv"
soil_long = read.csv(FTICR_SOIL_LONG)# <- "fticr/fticr_soil_longform.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_raw = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
# FTICR -- relative abundance files
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
# FTICR -- peaks files
pore_unique = read.csv(FTICR_PORE_UNIQUE)# <- "fticr/fticr_pore_uniquemolecules.csv"
soil_unique = read.csv(FTICR_SOIL_UNIQUE)# <- "fticr/fticr_soil_uniquemolecules.csv"
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
soil_peaks = read.csv(FTICR_SOIL_PEAKS)# <- "fticr/fticr_soil_peakscount.csv"
# FTICR_PORE
pore_aromatic = read.csv(FTICR_PORE_AROMATIC)# <- "fticr/fticr_pore_aromatic_counts.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_unique_peaks = read.csv(FTICR_PORE_UNIQUE_PEAKS)# <- "fticr/fticr_pore_unique_peakscount.csv"
pore_hcoc = read.csv(FTICR_PORE_HCOC)# <- "fticr/fticr_pore_hcoc.csv"
pore_nosc = read.csv(FTICR_PORE_NOSC)# <- "fticr/fticr_pore_nosc.csv"
pore_shannon = read.csv(FTICR_PORE_DIVERSITY)# <- "fticr/fticr_pore_shannondiversity.csv"
#FTICR_SOIL
soil_aromatic = read.csv(FTICR_SOIL_AROMATIC)# <- "fticr/fticr_soil_aromatic_counts.csv"
soil_nosc = read.csv(FTICR_SOIL_NOSC)# <- "fticr/fticr_soil_nosc.csv"
soil_hcoc = read.csv(FTICR_SOIL_HCOC)# <- "fticr/fticr_soil_hcoc.csv"
soil_unique_peaks = read.csv(FTICR_SOIL_UNIQUE_PEAKS)# <- "fticr/fticr_soil_unique_peakscount.csv"
# use file fticr_pore_relabundance_summary
# first, remove the `total` row
pore_relabund2 = pore_relabund[!pore_relabund$group=="total",]
# set Other as last factor
old.lvl = levels(factor(pore_relabund$Class))
pore_relabund$group = factor(pore_relabund$Class,
levels=c(sort(old.lvl[old.lvl!="Other"]), "Other"))
# set order of groups. all simple together and all complex together.
pore_relabund %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other")))->
pore_relabund
ggplot(pore_relabund, aes(x = treatment, y = relabund2, fill = Class))+
geom_bar(stat = "summary", width = 0.9)+
#scale_fill_brewer(palette = "Dark2")+
scale_fill_viridis_d(option = "inferno")+
xlab("")+
ylab("% relative abundance")+
facet_grid(tension~site)+
theme_bw()+
theme_kp()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("1.5 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
# use file fticr_pore_relabundance_summary
# first, remove the `total` row
soil_relabund %>%
dplyr::filter(!Class=="total") %>%
mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Unnamed")))->
soil_relabund
ggplot(soil_relabund, aes(x = treatment, y = relabund2, fill = Class))+
geom_bar(stat = "summary", width = 0.9)+
#scale_fill_brewer(palette = "Dark2")+
scale_fill_viridis_d(option = "inferno")+
xlab("")+
ylab("% relative abundance")+
facet_grid(~site)+
theme_bw()+
theme_kp()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
soil_relabund%>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Unnamed"))) %>%
ungroup %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
View(wsoc_pore)
source("0-packages.R")
## WSOC concentrations -- pores ####
# step 1: concentrations as mg/L ----
wsoc_pores = read_excel("data/3Soils_WSOC_CN_PoreCore.xlsx") %>%
dplyr::rename(wsoc_mg_L = `Water Soluble Organic Carbon (mg/L)`) %>%
dplyr::select(-FTICR_ID, -`FT-ICRvol_ml`, -`Pore Size Domain`, -`NPOC (M/L)`,-SampleID) %>%
#rename and reorder factors in Treatment
dplyr::mutate(Treatment = factor(wsoc_pores$Treatment,
levels = c("Time Zero Saturation",
"Field Moisture Incubation",
"Saturation Incubation",
"Drought Incubation"),
labels = c("Time Zero",
"Field Moist",
"Saturated",
"Drought")))->
wsoc_pores
## WSOC concentrations -- pores ####
# step 1: concentrations as mg/L ----
wsoc_pores = read_excel("data/3Soils_WSOC_CN_PoreCore.xlsx") %>%
dplyr::rename(wsoc_mg_L = `Water Soluble Organic Carbon (mg/L)`) %>%
dplyr::select(-FTICR_ID, -`FT-ICRvol_ml`, -`Pore Size Domain`, -`NPOC (M/L)`,-SampleID) %>%
#rename and reorder factors in Treatment
dplyr::mutate(Treatment = factor(wsoc_pores$Treatment,
levels = c("Time Zero Saturation",
"Field Moisture Incubation",
"Saturation Incubation",
"Drought Incubation"),
labels = c("Time Zero",
"Field Moist",
"Saturated",
"Drought")))->
wsoc_pores
source("0-packages.R")
wsoc_pores = read_excel("data/3Soils_WSOC_CN_PoreCore.xlsx")
## WSOC concentrations -- pores ####
# step 1: concentrations as mg/L ----
wsoc_pores = read_excel("data/3Soils_WSOC_CN_PoreCore.xlsx") %>%
dplyr::rename(wsoc_mg_L = `Water Soluble Organic Carbon (mg/L)`) %>%
dplyr::select(-FTICR_ID, -`FT-ICRvol_ml`, -`Pore Size Domain`, -`NPOC (M/L)`,-SampleID) %>%
#rename and reorder factors in Treatment
dplyr::mutate(Treatment = factor(wsoc_pores$Treatment,
levels = c("Time Zero Saturation",
"Field Moisture Incubation",
"Saturation Incubation",
"Drought Incubation"),
labels = c("Time Zero",
"Field Moist",
"Saturated",
"Drought")))->
wsoc_pores
View(wsoc_pores)
#
# step 3: get dry soil weight ----
core_weight = read.csv(CORE_WEIGHTS) %>%
dplyr::rename(CoreID = SampleID) %>%
dplyr::select(CoreID, dry_g)->core_weight
# step 4: now combine all, so we can convert mg/L to mg/g
wsoc_pores %>%
left_join(porewater_weight, by = c("Site","CoreNo","Suction")) %>%
left_join(core_weight, by = "CoreID") %>%
dplyr::select(CoreID, CoreNo,Site, Treatment, Suction, wsoc_mg_L, totalvolume_mL,dry_g) %>%
dplyr::mutate(wsoc_mgg = wsoc_mg_L * totalvolume_mL/dry_g)->
wsoc_pores_wt
## step 2b: NOW that the file has been edited in Excel, reupload it here ----
porewatersubset2 = read.csv("processed/porewater_subset.csv")
porewatersubset2 %>%
dplyr::select(-X) %>%
filter(!empty==0&!full==0) %>%
# create a new column to note missing weights
mutate(notes2 = case_when(empty == "no weight recorded"~"empty:no weight recorded",
full == "no weight recorded"~"full:no weight recorded")) %>%
# make the weight columns numeric
dplyr::mutate(empty = as.numeric(as.character(empty)),
full = as.numeric(as.character(full))) %>%
# for missing empty weight, take average of all the others
mutate(empty_corr = if_else(full>80,(2*mean(empty,na.rm = TRUE)),
if_else(is.na(empty),mean(empty, na.rm=TRUE),empty))) %>%
dplyr::mutate(empty_corr = round(empty_corr,2),
porewater_g = full-empty_corr) %>%
# now create a column for total volume
group_by(Site, Core, suction) %>%
#  dplyr::summarise(totalvolume_g = sum(porewater_g, na.rm = TRUE))->
# summarise creates a new summary table
# to view the totals in the same original table, comment that out and use the `mutate` function below
dplyr::mutate(totalvolume_g = sum(porewater_g, na.rm = TRUE),
totalvolume_g = na_if(totalvolume_g,0))->
porewatersubset3
porewatersubset3 %>%
group_by(Site, Core, suction) %>%
dplyr::summarise(totalvolume_g = sum(porewater_g, na.rm = TRUE)) %>%
dplyr::mutate(totalvolume_g = na_if(totalvolume_g,0)) %>%
dplyr::rename(totalvolume_mL = totalvolume_g,
tension=suction) %>%
dplyr::rename(CoreNo = Core,
Suction = tension)->
porewater_weight
#
# step 3: get dry soil weight ----
core_weight = read.csv(CORE_WEIGHTS) %>%
dplyr::rename(CoreID = SampleID) %>%
dplyr::select(CoreID, dry_g)->core_weight
# step 4: now combine all, so we can convert mg/L to mg/g
wsoc_pores %>%
left_join(porewater_weight, by = c("Site","CoreNo","Suction")) %>%
left_join(core_weight, by = "CoreID") %>%
dplyr::select(CoreID, CoreNo,Site, Treatment, Suction, wsoc_mg_L, totalvolume_mL,dry_g) %>%
dplyr::mutate(wsoc_mgg = wsoc_mg_L * totalvolume_mL/dry_g)->
wsoc_pores_wt
View(wsoc_pores_wt)
wsoc_pores_wt %>%
group_by(Suction,Site, Treatment) %>%
dplyr::summarize(wsoc_mgg_mean = mean(wsoc_mgg, na.rm = TRUE),
se = sd(wsoc_mgg)/sqrt(n()))
View(wsoc_pores_wt)
fit_dunnett_wsoc <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_L~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.))  ->
wsoc_pores_dunnett
View(wsoc_pores_dunnett)
wsoc_pores_wt %>%
group_by(Suction,Site, Treatment) %>%
# make summary columns for mg/L and mg/g values
dplyr::summarize(wsoc_mgg_mean = mean(wsoc_mgg, na.rm = TRUE),
mgg_se = sd(wsoc_mgg)/sqrt(n()),
wsoc_mgL_mean = mean(wsoc_mg_L, na.rm = TRUE),
mgL_se = sd(wsoc_mg_L)/sqrt(n())) %>%
dplyr::mutate(wsoc_mgg_mean_se = paste(round(wsoc_mgg_mean,2),"\u00B1",round(mgg_se,2)),
wsoc_mgL_mean_se = paste(round(wsoc_mgL_mean,2),"\u00B1",round(mgL_se,2))) %>%
ungroup %>%
dplyr::select(Site,Treatment,Suction,wsoc_mgg_mean_se, wsoc_mgL_mean_se)->
wsoc_pores_summary
View(wsoc_pores_summary)
wsoc_pores_wt %>%
filter(!is.na(wsoc_mg_L)) %>%
group_by(Suction,Site, Treatment) %>%
# make summary columns for mg/L and mg/g values
dplyr::summarize(wsoc_mgg_mean = mean(wsoc_mgg, na.rm = TRUE),
mgg_se = sd(wsoc_mgg)/sqrt(n()),
wsoc_mgL_mean = mean(wsoc_mg_L, na.rm = TRUE),
mgL_se = sd(wsoc_mg_L)/sqrt(n())) %>%
dplyr::mutate(wsoc_mgg_mean_se = paste(round(wsoc_mgg_mean,2),"\u00B1",round(mgg_se,2)),
wsoc_mgL_mean_se = paste(round(wsoc_mgL_mean,2),"\u00B1",round(mgL_se,2))) %>%
ungroup %>%
dplyr::select(Site,Treatment,Suction,wsoc_mgg_mean_se, wsoc_mgL_mean_se)->
wsoc_pores_summary
fit_dunnett_wsoc <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_L~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.))  ->
wsoc_pores_dunnett
wsoc_pores_dunnett %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett2
View(wsoc_pores_dunnett2)
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.)) %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
#  replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_dunnett = paste(wsoc_mgL_mean_se,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-dunnett)->
wsoc_pores_summary
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE)
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"")
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_dunnett = paste(wsoc_mgL_mean_se,dunnett))
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_dunnett = paste(wsoc_mgL_mean_se,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-dunnett)
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_dunnett = paste(wsoc_mgL_mean_se,dunnett)) ->
#   dplyr::select(-sd,-se,-ci,-dunnett)->
wsoc_pores_summary
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett)) ->
dplyr::select(-dunnett, -wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
wsoc_pores_wt %>%
filter(!is.na(wsoc_mg_L)) %>%
group_by(Suction,Site, Treatment) %>%
# make summary columns for mg/L and mg/g values
dplyr::summarize(wsoc_mgg_mean = mean(wsoc_mgg, na.rm = TRUE),
mgg_se = sd(wsoc_mgg)/sqrt(n()),
wsoc_mgL_mean = mean(wsoc_mg_L, na.rm = TRUE),
mgL_se = sd(wsoc_mg_L)/sqrt(n())) %>%
dplyr::mutate(wsoc_mgg_mean_se = paste(round(wsoc_mgg_mean,2),"\u00B1",round(mgg_se,2)),
wsoc_mgL_mean_se = paste(round(wsoc_mgL_mean,2),"\u00B1",round(mgL_se,2))) %>%
ungroup %>%
dplyr::select(Site,Treatment,Suction,wsoc_mgg_mean_se, wsoc_mgL_mean_se)->
wsoc_pores_summary
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett)) ->
dplyr::select(-dunnett, -wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.)) %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett)) ->
dplyr::select(-dunnett, -wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"")
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett)) ->
dplyr::select(-dunnett, -wsoc_mgL_mean_se)
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett)) ->
dplyr::select(-wsoc_mgL_mean_se)
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))  %>%
dplyr::select(-wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))  %>%
dplyr::select(-dunnett) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
wsoc_pores_wt %>%
filter(!is.na(wsoc_mg_L)) %>%
group_by(Suction,Site, Treatment) %>%
# make summary columns for mg/L and mg/g values
dplyr::summarize(wsoc_mgg_mean = mean(wsoc_mgg, na.rm = TRUE),
mgg_se = sd(wsoc_mgg)/sqrt(n()),
wsoc_mgL_mean = mean(wsoc_mg_L, na.rm = TRUE),
mgL_se = sd(wsoc_mg_L)/sqrt(n())) %>%
dplyr::mutate(wsoc_mgg_mean_se = paste(round(wsoc_mgg_mean,2),"\u00B1",round(mgg_se,2)),
wsoc_mgL_mean_se = paste(round(wsoc_mgL_mean,2),"\u00B1",round(mgL_se,2))) %>%
ungroup %>%
dplyr::select(Site,Treatment,Suction,wsoc_mgg_mean_se, wsoc_mgL_mean_se)->
wsoc_pores_summary
d <-DescTools::DunnettTest(wsoc_mg_L~Treatment, control = "Time Zero", data = dat)
fit_dunnett_wsoc <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_L~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.)) %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))  %>%
dplyr::select(-dunnett, -wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
### OUTPUT ----
write.csv(wsoc_pores_summary, WSOC_PORE, row.names = FALSE)
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
View(wsoc_pore)
names(wsoc_pore)
wsoc_pore %>%
ungroup %>%
dplyr::mutate(sp = paste(Suction, Site),
val = paste(wsoc_mgL)) %>%
dplyr::select(Treatment,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
wsoc_pore %>%
ungroup %>%
dplyr::mutate(sp = paste(Suction, Site),
val = paste(wsoc_mgg)) %>%
dplyr::select(Treatment,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
