wsoc_pores_summary
# merge the summary table with the hsd table
wsoc_pores_rmisc %>%
left_join(wsoc_pores_dunnett2,by = c("Site","Suction"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_hsd = paste(wsoc_mg_L,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-hsd)->
wsoc_pores_summary
# merge the summary table with the hsd table
wsoc_pores_rmisc %>%
left_join(wsoc_pores_dunnett2,by = c("Site","Suction"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_hsd = paste(wsoc_mg_L,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-dunnett)->
wsoc_pores_summary
View(wsoc_pores_summary)
### OUTPUT
write.csv(wsoc_pores_summary, WSOC_PORE)
wsoc_soils = read_excel("data/3Soils_WSOC_CN_PoreCore_soils.xlsx")
names(wsoc_soils)
wsoc_soils$wsoc_mg_g = wsoc_soils$`WSOC mgCg-1soil`
wsoc_soils$Treatment = factor(wsoc_soils$Treatment,
levels = c("Time Zero Saturation",
"Field Moisture Incubation",
"Saturation Incubation",
"Drought Incubation"),
labels = c("Time Zero",
"Field Moist",
"Saturated",
"Drought"))
wsoc_soils_rmisc = summarySE(wsoc_soils,measurevar = "wsoc_mg_g",groupvars = c("Site","Treatment"),na.rm = TRUE)
wsoc_soils_rmisc = wsoc_soils_rmisc[complete.cases(wsoc_soils_rmisc),]
wsoc_soils_rmisc$WSOC_mg_g = paste(round(wsoc_soils_rmisc$wsoc_mg_g,2),"\u00B1",round(wsoc_soils_rmisc$se,2))
#\u00b1 is plus-minus
fit_dunnett_wsoc_soil <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_g~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_soils = wsoc_soils[complete.cases(wsoc_soils),]
wsoc_soils %>%
group_by(Site) %>%
do(fit_dunnett_wsoc_soil(.))  ->
wsoc_soil_dunnett
wsoc_soil_dunnett %>%
gather(treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_soil_dunnett2
# merge the summary table with the hsd/dunnett table
wsoc_soils_rmisc %>%
left_join(wsoc_soil_dunnett2,by = c("Site"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_hsd = paste(WSOC_mg_g,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-dunnett)->
wsoc_soils_summary
wsoc_soil_dunnett
wsoc_soils
wsoc_soils %>%
group_by(Site) %>%
do(fit_dunnett_wsoc_soil(.))  ->
wsoc_soil_dunnett
wsoc_soil_dunnett
fit_dunnett_wsoc_soil <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_g~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_soils %>%
group_by(Site) %>%
do(fit_dunnett_wsoc_soil(.))  ->
wsoc_soil_dunnett
wsoc_soil_dunnett
wsoc_soils
wsoc_soil_dunnett %>%
gather(treatment, dunnett, 2:4)-> #gather columns 4-7 (treatment levels)
wsoc_soil_dunnett2
# merge the summary table with the hsd/dunnett table
wsoc_soils_rmisc %>%
left_join(wsoc_soil_dunnett2,by = c("Site"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_hsd = paste(WSOC_mg_g,dunnett)) %>%
dplyr::select(-sd,-se,-ci,-dunnett)->
wsoc_soils_summary
wsoc_soils_summary
### OUTPUT
write.csv(wsoc_soils_summary, WSOC_SOIL)
source("0-packages.R")
## step 1: load and merge the files ----
# data are split into (a) metadata and (b) sample data
# read_cvs reads the zipped files without extracting
fticr_soil_meta = read_csv("data/FTICR_INPUT_SOIL_META.csv.zip")
fticr_soil_data = read_csv("data/FTICR_INPUT_SOIL_DATA.csv.zip")
corekey = read.csv("data/COREKEY.csv")
fticr_soil_data %>%
# melt/gather. transform from wide to long form
gather(core, intensity, C1:S25) %>% ## core = name of new categ column, intensity = name of values column, C1:C25 are columns that are collapsed
# remove all samples with zero intensity
filter(!intensity=="0") %>%
# merge with the core key file
left_join(corekey,by = "core") %>%
## now we need to filter only those peaks seen in 3 or more replicates
# create a summary table with replicates
group_by(Mass,treatment,site) %>%
dplyr::summarize(reps = n()) %>%
# remove peaks seen in < 3 replicates
filter(reps>2) %>%
# merge with hcoc file
left_join(fticr_meta_hcoc, by = "Mass") %>%
# remove "unassigned" molecules
filter(!Class=="Unassigned")  ->
fticr_soil_gather2
fticr_soil_meta %>%
# remove unnecessary columns
dplyr::select(-C13,-Error_ppm,-Candidates,-GFE,-bs1_class,-bs2_class) %>%
# rename columns
dplyr::rename(OC = OtoC_ratio,
HC = HtoC_ratio)->
fticr_soil_meta
## make a subset for just HCOC
fticr_soil_meta %>%
select(Mass, Class, HC, OC)->
fticr_meta_hcoc
FTICR_META_HCOC <- "fticr/meta_hcoc.csv"
### OUTPUT
write.csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = "")
fticr_soil_meta
## make a subset for just HCOC
fticr_soil_meta %>%
dplyr::select(Mass, Class, HC, OC)->
fticr_meta_hcoc
### OUTPUT
write.csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = "")
### OUTPUT
write_csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = "")
### OUTPUT
write.csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = "")
### OUTPUT
write.csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = FALSE)
fticr_meta_hcoc
fticr_soil_meta %>%
# remove unnecessary columns
dplyr::select(-C13,-Error_ppm,-Candidates,-GFE,-bs1_class,-bs2_class) %>%
# rename columns
dplyr::rename(OC = OtoC_ratio,
HC = HtoC_ratio) %>%
filter(!Class=="Unassigned")->
fticr_soil_meta
fticr_soil_meta %>%
# remove unnecessary columns
#  dplyr::select(-C13,-Error_ppm,-Candidates,-GFE,-bs1_class,-bs2_class) %>%
# rename columns
dplyr::rename(OC = OtoC_ratio,
HC = HtoC_ratio) %>%
filter(!Class=="Unassigned")->
fticr_soil_meta
## step 1: load and merge the files ----
# data are split into (a) metadata and (b) sample data
# read_cvs reads the zipped files without extracting
fticr_soil_meta = read_csv("data/FTICR_INPUT_SOIL_META.csv.zip")
fticr_soil_meta %>%
# remove unnecessary columns
dplyr::select(-C13,-Error_ppm,-Candidates,-GFE,-bs1_class,-bs2_class) %>%
# rename columns
dplyr::rename(OC = OtoC_ratio,
HC = HtoC_ratio) %>%
filter(!Class=="Unassigned")->
fticr_soil_meta
fticr_soil_meta
a
## make a subset for just HCOC
fticr_soil_meta %>%
dplyr::select(Mass, Class, HC, OC)->
fticr_meta_hcoc
fticr_meta_hcoc
View(fticr_meta_hcoc)
## make a subset for just HCOC
fticr_soil_meta %>%
dplyr::select(Mass, Class, HC, OC) %>%
dplyr::mutate(HC = round(HC, 4),
OC = round(OC,4))->
fticr_meta_hcoc
View(fticr_meta_hcoc)
### OUTPUT
write.csv(fticr_meta_hcoc, FTICR_META_HCOC, row.names = FALSE)
fticr_soil_data %>%
# melt/gather. transform from wide to long form
gather(core, intensity, C1:S25) %>% ## core = name of new categ column, intensity = name of values column, C1:C25 are columns that are collapsed
# remove all samples with zero intensity
filter(!intensity=="0") %>%
# merge with the core key file
left_join(corekey,by = "core") %>%
## now we need to filter only those peaks seen in 3 or more replicates
# create a summary table with replicates
group_by(Mass,treatment,site) %>%
dplyr::summarize(reps = n()) %>%
# remove peaks seen in < 3 replicates
filter(reps>2) %>%
# merge with hcoc file
left_join(fticr_meta_hcoc, by = "Mass") %>%
# remove "unassigned" molecules
filter(!Class=="Unassigned")  ->
fticr_soil_gather2
### OUTPUT
# write.csv(fticr_soil_gather2,"fticr_soil_longform.csv")
write.csv(fticr_soil_gather2, FTICR_SOIL_LONG, row.names = FALSE)
View(fticr_soil_gather2)
fticr_soil_data %>%
# melt/gather. transform from wide to long form
gather(core, intensity, C1:S25) %>% ## core = name of new categ column, intensity = name of values column, C1:C25 are columns that are collapsed
# remove all samples with zero intensity
filter(!intensity=="0") %>%
# merge with the core key file
left_join(corekey,by = "core") %>%
## now we need to filter only those peaks seen in 3 or more replicates
# create a summary table with replicates
group_by(Mass,treatment,site) %>%
dplyr::summarize(reps = n(),
intensity = mean(intensity)) %>%
# remove peaks seen in < 3 replicates
filter(reps>2) %>%
# merge with hcoc file
left_join(fticr_meta_hcoc, by = "Mass") %>%
# remove "unassigned" molecules
filter(!Class=="Unassigned")  ->
fticr_soil_gather2
### OUTPUT
# write.csv(fticr_soil_gather2,"fticr_soil_longform.csv")
write.csv(fticr_soil_gather2, FTICR_SOIL_LONG, row.names = FALSE)
fticr_soil_data %>%
# melt/gather. transform from wide to long form
gather(core, intensity, C1:S25) %>% ## core = name of new categ column, intensity = name of values column, C1:C25 are columns that are collapsed
# remove all samples with zero intensity
filter(!intensity=="0") %>%
# merge with the core key file
left_join(corekey,by = "core") %>%
## now we need to filter only those peaks seen in 3 or more replicates
# add a column with no. of replicates
group_by(Mass,treatment,site) %>%
dplyr::mutate(reps = n()) %>%
# remove peaks seen in < 3 replicates
filter(reps>2) %>%
# merge with hcoc file
left_join(fticr_meta_hcoc, by = "Mass") %>%
# remove "unassigned" molecules
filter(!Class=="Unassigned")  ->
fticr_soil_raw_long
## now create a summary of this
fticr_soil_raw_long %>%
group_by(Mass,treatment,site) %>%
summarize(intensity = mean(intensity))->
fticr_soil_long
View(fticr_soil_long)
View(fticr_soil_raw_long)
## now create a summary of this
fticr_soil_raw_long %>%
ungroup %>%
group_by(Mass,treatment,site) %>%
summarize(intensity = mean(intensity))->
fticr_soil_long
## now create a summary of this
fticr_soil_raw_long %>%
ungroup %>%
group_by(Mass,treatment,site) %>%
dplyr::summarize(intensity = mean(intensity))->
fticr_soil_long
View(fticr_soil_long)
## now create a summary of this
fticr_soil_raw_long %>%
ungroup %>%
group_by(Mass,site,treatment) %>%
dplyr::summarize(intensity = mean(intensity))->
fticr_soil_long
## now create a summary of this
fticr_soil_raw_long %>%
ungroup %>%
group_by(Mass,site,treatment) %>%
dplyr::summarize(intensity = mean(intensity)) %>%
# merge with hcoc file
left_join(fticr_meta_hcoc, by = "Mass") ->
fticr_soil_long
# FTICR_SOIL
FTICR_SOIL_RAW_LONG <- "fticr/fticr_soil_raw_longform.csv"
### OUTPUT
# write.csv(fticr_soil_gather2,"fticr_soil_longform.csv")
write.csv(fticr_soil_long, FTICR_SOIL_LONG, row.names = FALSE)
write.csv(fticr_soil_raw_long, FTICR_SOIL_RAW_LONG, row.names = FALSE)
View(fticr_soil_raw_long)
# summarizing by groups
fticr_soil_raw_long %>%
group_by(site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) ->
fticr_soil_groups
View(fticr_soil_groups)
fticr_soil_groups$compounds = as.numeric(fticr_soil_groups$compounds)
fticr_soil_groups_wide = spread(fticr_soil_groups,Class,compounds)
fticr_soil_groups_wide %>%
mutate(total = rowSums(.[4:12])) ->
fticr_soil_groups_wide
## relative abundance
fticr_soil_groups_wide[,-c(1:3)] %>%
sapply('/', fticr_soil_groups_wide$total/100)->
fticr_soil_abundance
fticr_soil_abundance2 = data.frame(fticr_soil_abundance)
corenames = data.frame(fticr_soil_groups_wide[,c(1:3)])
fticr_soil_relabundance = cbind(corenames,fticr_soil_abundance2)
### OUTPUT
# write.csv(fticr_soil_relabundance,"fticr_soil_relabund_cores.csv")
# write_csv(fticr_soil_relabundance,path = "fticr/fticr_soil_relabund_cores.csv")
## relative abundance by treatment/site
fticr_soil_relabundance_long = fticr_soil_relabundance %>%
gather(group, relabund, AminoSugar:total)
fticr_soil_relabundance_summary = summarySE(fticr_soil_relabundance_long,
measurevar = "relabund",
groupvars = c("site","treatment","group"),na.rm = TRUE)
fticr_soil_relabundance_summary$relativeabundance = paste((round(fticr_soil_relabundance_summary$relabund,2)),
"\u00B1",
round(fticr_soil_relabundance_summary$se,2))
setDT(fticr_soil_relabundance_summary)[group=="total", relativeabundance := "100"]
# set total as last factor
old.lvl = levels(factor(fticr_soil_relabundance_summary$group))
fticr_soil_relabundance_summary$group = factor(fticr_soil_relabundance_summary$group,
levels=c(sort(old.lvl[old.lvl!="total"]), "total"))
# cast the table in a different manner, with groups as rows
# fticr_soil_relabundance_summarytable2 = dcast(fticr_soil_relabundance_summary,
#                                              site+group~treatment,value.var = "relativeabundance")
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = fticr_soil_relabundance_long)
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["TZsaturation-baseline",4])
d
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["time zero saturation-baseline",4])
t
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = fticr_soil_relabundance_long)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["time zero saturation-baseline",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_soil_relabundance_long[!fticr_soil_relabundance_long$group=="total",] %>%
group_by(site, group) %>%
do(fit_dunnett_relabund(.))  ->
soil_relabund_hsd
soil_relabund_hsd
fticr_soil_relabundance_long[!fticr_soil_relabundance_long$group=="total",] %>%
group_by(site, group) %>%
do(fit_dunnett_relabund(.))  ->
soil_relabund_dunnett
soil_relabund_dunnett %>%
gather(treatment, dunnett, 2:5)-> #gather columns 4-7 (treatment levels)
soil_relabund_dunnett2
soil_relabund_dunnett2
View(soil_relabund_dunnett2)
soil_relabund_dunnett
soil_relabund_dunnett %>%
gather(treatment, dunnett, 3:6)-> #gather columns 4-7 (treatment levels)
soil_relabund_dunnett2
soil_relabund_dunnett2
View(soil_relabund_dunnett)
View(fticr_soil_relabundance_long)
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = fticr_soil_relabundance_long)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["time zero saturation-baseline",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_soil_relabundance_long[!fticr_soil_relabundance_long$group=="total",] %>%
group_by(site, group) %>%
do(fit_dunnett_relabund(.))  ->
soil_relabund_dunnett
View(soil_relabund_dunnett)
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`baseline`["drought-baseline",4],
`saturation` = d$`baseline`["saturation-baseline",4],
`field moist` = d$`baseline`["field moist-baseline",4],
`TZsaturation` = d$baseline["time zero saturation-baseline",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_soil_relabundance_long[!fticr_soil_relabundance_long$group=="total",] %>%
group_by(site, group) %>%
do(fit_dunnett_relabund(.))  ->
soil_relabund_dunnett
View(soil_relabund_dunnett)
soil_relabund_dunnett %>%
gather(treatment, dunnett, 3:6)-> #gather columns 4-7 (treatment levels)
soil_relabund_dunnett2
fticr_soil_relabundance_summary %>%
left_join(soil_relabund_dunnett2,by = c("site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relativeabundance,dunnett)) %>%
dplyr::select(-se,-sd, -ci, -dunnett,-N,)->
fticr_soil_relabundance_summary2
View(fticr_soil_relabundance_summary2)
### OUTPUT
write_csv(fticr_soil_relabundance_summary2, FTICR_SOIL_RELABUND)
## peaks ----
fticr_soil_long %>%
group_by(site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(site,treatment) %>%
dplyr::mutate(total = sum(peaks)) -> # then create a new column for sum of all peaks for each tension-site-treatment
fticr_soil_peaks
View(fticr_soil_peaks)
# we need to combine the total value into the existing groups column
fticr_soil_peaks %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)-> # combine all the groups+total into a single column
fticr_soil_peaks2
View(fticr_soil_peaks2)
## peaks ----
fticr_soil_raw_long %>%
group_by(site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(site,treatment) %>%
dplyr::mutate(total = sum(peaks)) -> # then create a new column for sum of all peaks for each tension-site-treatment
fticr_soil_peaks
# we need to combine the total value into the existing groups column
fticr_soil_peaks %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)-> # combine all the groups+total into a single column
fticr_soil_peaks2
## peaks ----
fticr_soil_long %>%
group_by(site,treatment,Class) %>%
dplyr::summarize(peaks = n()) %>% # get count of each group/class for each tension-site-treatment
group_by(site,treatment) %>%
dplyr::mutate(total = sum(peaks)) -> # then create a new column for sum of all peaks for each tension-site-treatment
fticr_soil_peaks
# we need to combine the total value into the existing groups column
fticr_soil_peaks %>%
spread(Class,peaks) %>% # first, convert into wide-form, so each group is a column
dplyr::select(-total,total) %>% # move total to the end
gather(Class,peaks_count,AminoSugar:total)-> # combine all the groups+total into a single column
fticr_soil_peaks2
