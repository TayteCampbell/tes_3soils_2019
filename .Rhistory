fticr_pore_data_1 = (select(fticr_porewater, "Mass", starts_with("1")))
## meta: remove componds without class
fticr_pore_meta = fticr_pore_meta[!(fticr_pore_meta$Class=="None"),]
#AImod = (1+C-1/2 O-S-1/2H)/(C=1/2 O -S-N-P). Formula from Bailey et al. 2017 SOC pore water
fticr_pore_meta$AImod = with(fticr_pore_meta, (1+C-(0.5*O)-S-(0.5*H))/(C-(0.5*O)-S-N-P))
#NOSC = 4-((4C+H-3N-2O-2S)/C). From Riedel et al. in Coward et al. 2019
fticr_pore_meta$NOSC = with(fticr_pore_meta, 4-(((4*C)+H-(3*N)-(2*O)-(2*S))/C))
fticr_pore_meta$HC = with(fticr_pore_meta, H/C)
fticr_pore_meta$OC = with(fticr_pore_meta, O/C)
names(fticr_pore_meta)
names(fticr_pore_data_50)
# melt/gather. transform from wide to long form
fticr_pore_melt_50 = fticr_pore_data_50 %>%
melt(id = "Mass")
View(fticr_pore_melt_50)
# remove all samples with zero intensity
fticr_pore_melt_50 = fticr_pore_melt_50[!(fticr_pore_melt_50$value=="0"),]
fticr_pore_melt_1 = fticr_pore_data_1 %>%
melt(id = "Mass")
fticr_pore_melt_1 = fticr_pore_melt_1[!(fticr_pore_melt_1$value=="0"),]
View(fticr_pore_melt_1)
View(fticr_pore_melt_50)
View(corekey)
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
View(fticr_pore_melt)
# create columns for core # and tension
fticr_pore_melt %>%
mutate(tension = substr(variable,start=1,stop=1))->
fticr_pore_melt
View(fticr_pore_melt)
# create columns for core # and tension
fticr_pore_melt %>%
mutate(tension = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) ->
fticr_pore_melt
View(fticr_pore_melt)
tension=="1"~"1.5 kPa",
tension=="50"~"50 kPa")) ->
fticr_pore_melt
View(fticr_pore_melt)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) ->
fticr_pore_melt
View(fticr_pore_melt)
# create columns for core # and tension
fticr_pore_melt %>%
mutate(tension_2 = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) %>%
mutate(tension = case_when(
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) ->
fticr_pore_melt
View(fticr_pore_melt)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) %>%
select(-"tension_2")->
fticr_pore_melt
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) %>%
select(-tension_2)->
fticr_pore_melt
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa"))->
fticr_pore_melt
fticr_pore_melt %>%
select(-tension_2)->
fticr_pore_melt
View(fticr_pore_melt)
# merge with the core key file
fticr_pore_melt = merge(corekey,fticr_pore_melt,by = "core")
View(fticr_pore_melt)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa"))->
fticr_pore_melt
fticr_pore_melt %>%
select(-tension_2)->
fticr_pore_melt
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
# create columns for core # and tension
# use tension_2 to code the tension column using the stringr extraction function, and then delete tension_2 because it is unnecessary
fticr_pore_melt %>%
mutate(tension_2 = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) %>%
mutate(tension = case_when(
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa"))->
fticr_pore_melt
fticr_pore_melt %>%
select(-tension_2)->
fticr_pore_melt
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core")
View(fticr_pore_melt2)
View(fticr_pore_melt)
fticr_pore_melt %>%
select(-tension_2)->
as.dataframe(fticr_pore_melt)
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
# create columns for core # and tension
# use tension_2 to code the tension column using the stringr extraction function, and then delete tension_2 because it is unnecessary
fticr_pore_melt %>%
mutate(tension_2 = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) %>%
mutate(tension = case_when(
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa"))->
fticr_pore_melt
fticr_pore_melt %>%
select(-tension_2)->
as.dataframe(fticr_pore_melt)
fticr_pore_melt %>%
select(-tension_2)->
as.data.frame(fticr_pore_melt)
fticr_pore_melt = as.data.frame(fticr_pore_melt)
str(fticr_pore_melt)
fticr_pore_melt %>%
select(-tension_2)->
fticr_pore_melt
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
# create columns for core # and tension
# use tension_2 to code the tension column using the stringr extraction function, and then delete tension_2 because it is unnecessary
fticr_pore_melt %>%
mutate(tension_2 = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) %>%
mutate(tension = case_when(
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa"))->
fticr_pore_melt
fticr_pore_melt %>%
select(-tension_2)->
fticr_pore_melt
str(fticr_pore_melt)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core")
str(fticr_pore_melt2)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core", all.x = all, all.y = all)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core", all.x = all)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core", all = TRUE)
View(fticr_pore_melt2)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core", all = TRUE, all.x = all, all.y = all)
# merge with the core key file
fticr_pore_melt2 = cbind(fticr_pore_melt,corekey) #,by = "core", all = TRUE, all.x = all, all.y = all)
# merge with the core key file
fticr_pore_melt2 = merge(fticr_pore_melt,corekey,by = "core",  all.x = TRUE)
View(fticr_pore_melt2)
View(fticr_pore_melt)
# merge with the core key file
fticr_pore_melt2 = merge(corekey,fticr_pore_meltby = "core",  all.x = TRUE, all.y = TRUE)
# merge with the core key file
fticr_pore_melt2 = merge(corekey,fticr_pore_melt,by = "core",  all.x = TRUE, all.y = TRUE)
View(fticr_pore_melt2)
# merge with the core key file
fticr_pore_melt2 = merge(corekey,fticr_pore_melt,by = "core",  all = TRUE, all.x = TRUE, all.y = TRUE)
View(fticr_pore_melt2)
# merge with the core key file
fticr_pore_melt2 = merge(corekey,fticr_pore_melt,by = "core",  all = TRUE, all.x = TRUE, all.y = TRUE)
View(fticr_pore_melt2)
fticr_melt_2_dlpyr = left_join(corekey,fticr_pore_melt, by = "core")
View(fticr_melt_2_dlpyr)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")))->
fticr_pore_melt
str(fticr_pore_melt)
# merge with the core key file
fticr_pore_melt2 = left_join(corekey,fticr_pore_melt, by = "core")
#remove NA
fticr_pore_melt2 = complete.cases(fticr_pore_melt2)
# merge with the core key file
fticr_pore_melt2 = left_join(corekey,fticr_pore_melt, by = "core")
#remove NA
fticr_pore_melt2 = fticr_pore_melt2[complete.cases(fticr_pore_melt2),]
View(fticr_pore_melt2)
fticr_pore_melt %>%
select(-tension_2,-variable)->
fticr_pore_melt
fticr_pore_melt %>%
select(-variable)->
fticr_pore_melt
# merge with the core key file
fticr_pore_melt2 = left_join(corekey,fticr_pore_melt, by = "core")
#remove NA
fticr_pore_melt2 = fticr_pore_melt2[complete.cases(fticr_pore_melt2),]
View(fticr_pore_melt2)
fticr_pore_melt2 %>%
group_by(Mass,treatment,site, tension) %>%
dplyr::mutate(reps = n()) ->
fticr_pore_melt3
View(fticr_pore_melt3)
fticr_pore_melt3 = fticr_pore_melt3[!(fticr_pore_melt3$reps<3),]
### OUTPUT
write_csv(fticr_pore_melt3, path = "fticr/fticr_pore_longform.csv")
#
## step 3: relative abundance ----
# merge the file with the metadata
fticr_pore_melt3  = left_join(fticr_pore_meta, fticr_pore_melt3, by = "Mass")
View(fticr_pore_melt3)
fticr_pore_melt3 = fticr_pore_melt3[complete.cases(fticr_pore_melt3),]
View(fticr_pore_melt3)
# summarizing by groups
fticr_pore_melt3 %>%
group_by(site, treatment,Class,core, tension) %>%
dplyr::summarize(compounds = sum(intensity)) ->
fticr_pore_groups
fticr_pore_melt %>%
select(-tension_2,-variable) %>%
rename(intensity = value)->
fticr_pore_melt
fticr_pore_melt %>%
rename(intensity = value)->
fticr_pore_melt
View(fticr_pore_melt)
fticr_pore_melt %>%
rename(value = intensity)->
fticr_pore_melt
fticr_pore_melt %>%
rename(intensity = value)->
fticr_pore_melt
fticr_pore_melt %>%
rename(intensity = value)
fticr_pore_melt %>%
rename(intensity = value)
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
fticr_pore_melt %>%
rename(intensity = value)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) %>%
dplyr::rename(intensity = value)->
fticr_pore_melt
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
View(fticr_pore_melt)
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) %>%
dplyr::rename(intensity = `value`)->
fticr_pore_melt
fticr_pore_melt %>%
dplyr::rename(intensity = value)
View(fticr_pore_melt)
fticr_pore_melt %>%
dplyr::rename(intensity = value) ->
fticr_pore_melt
View(fticr_pore_melt)
# combine the 50 and 1.5 kPa files
fticr_pore_melt = rbind(fticr_pore_melt_1,fticr_pore_melt_50)
# create columns for core # and tension
# use tension_2 to code the tension column using the stringr extraction function, and then delete tension_2 because it is unnecessary
fticr_pore_melt %>%
dplyr::rename(intensity = value) %>%
mutate(tension_2 = substr(variable,start=1,stop=1)) %>%
mutate(core = substr(variable,start=3,stop=7)) %>%
mutate(tension = case_when(
tension_2=="1"~"1.5 kPa",
tension_2=="50"~"50 kPa")) ->
fticr_pore_melt
View(fticr_pore_melt)
fticr_pore_melt %>%
select(-tension_2,-variable) ->
fticr_pore_melt
# merge with the core key file
fticr_pore_melt2 = left_join(corekey,fticr_pore_melt, by = "core")
#remove NA
fticr_pore_melt2 = fticr_pore_melt2[complete.cases(fticr_pore_melt2),]
fticr_pore_melt2 %>%
group_by(Mass,treatment,site, tension) %>%
dplyr::mutate(reps = n()) ->
fticr_pore_melt3
fticr_pore_melt3 = fticr_pore_melt3[!(fticr_pore_melt3$reps<3),]
### OUTPUT
write_csv(fticr_pore_melt3, path = "fticr/fticr_pore_longform.csv")
#
## step 3: relative abundance ----
# merge the file with the metadata
fticr_pore_melt3  = left_join(fticr_pore_meta, fticr_pore_melt3, by = "Mass")
fticr_pore_melt3 = fticr_pore_melt3[complete.cases(fticr_pore_melt3),]
View(fticr_pore_melt3)
# summarizing by groups
fticr_pore_melt3 %>%
group_by(site, treatment,Class,core, tension) %>%
dplyr::summarize(compounds = sum(intensity)) ->
fticr_pore_groups
View(fticr_pore_groups)
fticr_soil_groups$compounds = as.numeric(fticr_soil_groups$compounds)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
View(fticr_pore_groups_wide)
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
## relative abundance
fticr_pore_groups_wide[,-c(1:4)] %>%
sapply('/', fticr_soil_groups_wide$total)->
fticr_pore_abundance
## relative abundance
fticr_pore_groups_wide[,-c(1:4)] %>%
sapply('/', fticr_soil_groups_wide$total)->
fticr_pore_abundance
## relative abundance
fticr_pore_groups_wide[,-c(1:4)] %>%
sapply('/', fticr_pore_groups_wide$total)->
fticr_pore_abundance
fticr_pore_abundance2 = data.frame(fticr_pore_abundance)
corenames = data.frame(fticr_pore_groups_wide[,c(1:4)])
fticr_pore_relabundance = cbind(corenames,fticr_pore_abundance2)
View(fticr_pore_relabundance)
View(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
View(fticr_pore_groups_wide)
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
str(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
View(fticr_pore_groups_wide)
str(fticr_pore_groups_wide)
fticr_pore_groups_wide$Tannin = as.numeric(fticr_pore_groups_wide$Tannin)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide[,5:13] %>%
mutate_if(is.character,is.numeric)->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
str(fticr_pore_groups_wide)
View(fticr_pore_groups_wide)
fticr_pore_groups_wide[,5:13] %>%
mutate_if(is.character,is.numeric)->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
View(fticr_pore_groups_wide)
fticr_pore_groups_wide[,5:13] %>%
mutate(is.numeric)->
fticr_pore_groups_wide
fticr_pore_groups_wide[,5:13] %>%
mutate_each_(funs(as.numeric))->
fticr_pore_groups_wide
fticr_pore_groups_wide[,c(5:13)] %>%
mutate_each_(funs(as.numeric))->
fticr_pore_groups_wide
fticr_pore_groups_wide[,c(5:13)] %>%
mutate_each_(funs(as.numeric))->
fticr_pore_groups_wide
View(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
fticr_pore_groups_wide[,c(5:13)] %>%
mutate_each_(funs(as.numeric))->
fticr_pore_groups_wide
View(fticr_pore_groups_wide)
str(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide[,c(5:13)] %>%
mutate_if(is.character,is.numeric)->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
fticr_pore_groups_wide$Other = as.numeric(fticr_pore_groups_wide$Other)
fticr_pore_groups_wide$Tannin = as.numeric(fticr_pore_groups_wide$Tannin)
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
View(fticr_pore_groups_wide)
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),"0") ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),0) ->
fticr_pore_groups_wide
fticr_pore_groups_wide = spread(fticr_pore_groups,Class,compounds)
fticr_pore_groups_wide = as.data.frame(fticr_pore_groups_wide)
# create a `total` column adding counts across all "group" columns (columns 5-13)
fticr_pore_groups_wide %>%
replace(.,is.na(.),0) ->
fticr_pore_groups_wide
str(fticr_pore_groups_wide)
ticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
ticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
fticr_pore_groups_wide %>%
mutate(total = rowSums(.[5:13])) ->
fticr_pore_groups_wide
## relative abundance:
# split the dataset into (a) just the abundance values for easy calculations, and (b) the core key. Then combine again.
fticr_pore_groups_wide[,-c(1:4)] %>%
sapply('/', fticr_pore_groups_wide$total)->
fticr_pore_abundance
fticr_pore_abundance2 = data.frame(fticr_pore_abundance)
corenames = data.frame(fticr_pore_groups_wide[,c(1:4)])
fticr_pore_relabundance = cbind(corenames,fticr_pore_abundance2)
### OUTPUT
# write.csv(fticr_soil_relabundance,"fticr_soil_relabund_cores.csv")
write_csv(fticr_soil_relabundance,path = "fticr/fticr_soil_relabund_cores.csv")
### OUTPUT
# write.csv(fticr_soil_relabundance,"fticr_soil_relabund_cores.csv")
write_csv(fticr_pore_relabundance,path = "fticr/fticr_pore_relabund_cores.csv")
View(fticr_pore_relabundance)
## relative abundance by treatment/site
fticr_pore_relabundance_long = fticr_pore_relabundance %>%
gather(group, relabund, AminoSugar:total)
View(fticr_pore_relabundance_long)
fticr_pore_relabundance_summary = summarySE(fticr_pore_relabundance_long, measurevar = "relabund", groupvars = c("site","treatment","group","tension"),na.rm = TRUE)
fticr_pore_relabundance_summary$relativeabundance = paste((round(fticr_pore_relabundance_summary$relabund,3)),
"\u00B1",
round(fticr_pore_relabundance_summary$se,3))
fticr_pore_relabundance_summarytable = dcast(fticr_pore_relabundance_summary,site+treatment+tension~group,value.var = "relativeabundance")
View(fticr_pore_relabundance_summarytable)
# move Unnamed and total columns to the end
fticr_pore_relabundance_summarytable %>%
select(-Unnamed,Unnamed) %>%
select(-total,total) ->
fticr_pore_relabundance_summarytable
# move Unnamed and total columns to the end
fticr_pore_relabundance_summarytable %>%
select(-Other,Other) %>%
select(-total,total) ->
fticr_pore_relabundance_summarytable
# remove +/- SE values for the total column
fticr_pore_relabundance_summarytable$total="1"
### OUTPUT
# write.csv(fticr_soil_relabundance_summarytable,"fticr_soil_relabundance_groups.csv")
write_csv(fticr_pore_relabundance_summarytable,path = "fticr/fticr_pore_relabundance_groups.csv")
View(fticr_pore_relabundance_summarytable)
# first, combine all cores within each treatment
fticr_pore_melt_trtsummary = summarySE(fticr_pore_melt3, measurevar = "intensity", groupvars = c("site", "treatment", "Mass","tension"))
View(fticr_pore_melt_trtsummary)
# second, split the file into three, for the three sites
fticr_pore_melt_trtsummary_c = fticr_pore_melt_trtsummary[fticr_pore_melt_trtsummary$site=="CPCRW",1:5]
fticr_pore_melt_trtsummary_d = fticr_pore_melt_trtsummary[fticr_pore_melt_trtsummary$site=="DWP",1:5]
fticr_pore_melt_trtsummary_s = fticr_pore_melt_trtsummary[fticr_pore_melt_trtsummary$site=="SR",1:5]
# third, make a new column that is binary for presence (1) and absence (0). if N>0, a molecule is present
setDT(fticr_pore_melt_trtsummary_c)[N>0, presence := "1"]
View(fticr_pore_melt_trtsummary_c)
