t
t %>%
gather(trt, pval, 1:3) %>%
mutate(p = if_else(pval<0.05, "*","")) %>%
select(-pval) %>%
spread(trt, p)->
t
t
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t
t %>%
gather(trt, pval, 1:3) %>%
mutate(p = if_else(pval<0.05, "*","")) %>%
select(-pval) ->
t
t %>%
gather(trt, pval, 1:3) %>%
mutate(p = if_else(pval<0.05, "*",""))   ->
t
t
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t %>%
gather(trt, pval, 1:3) %>%
mutate(p = if_else(pval<0.05, "*","")) %>%
dplyr::select(-pval) ->
t
t
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t
# we need to convert significant p values to asterisks
t %>%
if_else(pval<0.05, "*","")  ->
t
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
t
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
fit_dunnett_relabund <- function(dat) {
d <-dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
library(DescTools)
fit_dunnett_relabund <- function(dat) {
d <-dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
fit_hsd_relabund <- function(dat) {
a <-aov(relabund ~ treatment, data = dat)
h <-HSD.test(a,"treatment")
#create a tibble with one column for each treatment
#the hsd results are row1 = drought, row2 = saturation, row3 = time zero saturation, row4 = field moist. hsd letters are in column 2
tibble(`drought` = h$groups["drought",2],
`saturation` = h$groups["saturation",2],
`time zero saturation` = h$groups["time zero saturation",2],
`field moist` = h$groups["field moist",2])
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_hsd_relabund(.))  ->
pore_relabund_hsd
fit_dunnett_relabund <- function(dat) {
d <-dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
a = aov(relabund~treatment, data = fticr_pore_relabundance_long)
d = DunnettTest(a, control = "time zero saturation")
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
fit_dunnett_relabund <- function(dat) {
d <-DescTools::dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_hsd_relabund(.))  ->
pore_relabund_dunnett
pore_relabund_dunnett
fit_dunnett_relabund <- function(dat) {
d <-DescTools::dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
View(fit_dunnett_relabund)
function(dat) {
d <-DescTools::dunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = fticr_pore_relabundance_long)
d
d <-DescTools::dunnettTest(relabund~treatment, control = "time zero saturation", data = fticr_pore_relabundance_long)
d
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
fticr_pore_relabundance_long[!fticr_pore_relabundance_long$group=="total",] %>%
group_by(site, tension, group) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
pore_relabund_dunnett
pore_relabund_dunnett %>%
gather(treatment, hsd, 4:7)-> #gather columns 4-7 (treatment levels)
pore_relabund_hsd2
pore_relabund_dunnett %>%
gather(treatment, hsd, 4:6)-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett2
fticr_pore_relabundance_summary2 = merge(fticr_pore_relabundance_summary, pore_relabund_dunnett2, by = c("tension","site","group","treatment"))
View(fticr_pore_relabundance_summary2)
pore_relabund_dunnett %>%
gather(treatment, dunnett, 4:6)-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett2
fticr_pore_relabundance_summary2 = merge(fticr_pore_relabundance_summary, pore_relabund_dunnett2, by = c("tension","site","group","treatment"))
fticr_pore_relabundance_summary2$relativeabundance = paste(fticr_pore_relabundance_summary2$relativeabundance," ",fticr_pore_relabundance_summary2$dunnett)
fticr_pore_relabundance_summary2 = merge(fticr_pore_relabundance_summary, pore_relabund_dunnett2, by = c("tension","site","group","treatment"))
fticr_pore_relabundance_summary2$relativeabundance = paste(fticr_pore_relabundance_summary2$relativeabundance,fticr_pore_relabundance_summary2$dunnett)
### OUTPUT
write_csv(fticr_pore_relabundance_summary2,FTICR_PORE_RELABUND)
source("0-packages.R")
# input files
#   CHARAC
charac = read.csv(CHARACTERIZATION)# <- "processed/soil_characterization.csv"
pore = read.csv(PORE_DISTRIBUTION)# <- "processed/pore_distribution.csv"
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
wsoc_soil = read.csv(WSOC_SOIL)# <- "processed/wsoc_soils_summary.csv"
# FTICR_PORE
pore_aromatic = read.csv(FTICR_PORE_AROMATIC)# <- "fticr/fticr_pore_aromatic_counts.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_unique = read.csv(FTICR_PORE_UNIQUE)# <- "fticr/fticr_pore_uniquemolecules.csv"
pore_unique_peaks = read.csv(FTICR_PORE_UNIQUE_PEAKS)# <- "fticr/fticr_pore_unique_peakscount.csv"
pore_hcoc = read.csv(FTICR_PORE_HCOC)# <- "fticr/fticr_pore_hcoc.csv"
pore_nosc = read.csv(FTICR_PORE_NOSC)# <- "fticr/fticr_pore_nosc.csv"
#FTICR_SOIL
soil_aromatic = read.csv(FTICR_SOIL_AROMATIC)# <- "fticr/fticr_soil_aromatic_counts.csv"
soil_nosc = read.csv(FTICR_SOIL_NOSC)# <- "fticr/fticr_soil_nosc.csv"
soil_hcoc = read.csv(FTICR_SOIL_HCOC)# <- "fticr/fticr_soil_hcoc.csv"
soil_unique = read.csv(FTICR_SOIL_UNIQUE)# <- "fticr/fticr_soil_uniquemolecules.csv"
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
soil_peaks = read.csv(FTICR_SOIL_PEAKS)# <- "fticr/fticr_soil_peakscount.csv"
soil_unique_peaks = read.csv(FTICR_SOIL_UNIQUE_PEAKS)# <- "fticr/fticr_soil_unique_peakscount.csv"
# use file fticr_pore_relabundance_summary
# first, remove the `total` row
pore_relabund = pore_relabund[!pore_relabund$group=="total",]
# set Other as last factor
old.lvl = levels(factor(pore_relabund$group))
pore_relabund$group = factor(pore_relabund$group,
levels=c(sort(old.lvl[old.lvl!="Other"]), "Other"))
# set order of groups. all simple together and all complex together.
pore_relabund %>%
mutate(group = factor(group, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other")))->
pore_relabund
ggplot(pore_relabund, aes(x = treatment, y = relabund, fill = group))+
geom_bar(stat = "summary", width = 0.9)+
#scale_fill_brewer(palette = "Dark2")+
scale_fill_viridis_d(option = "inferno")+
xlab("")+
ylab("% relative abundance")+
facet_grid(tension~site)+
theme_bw()+
theme_kp()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
select(site, group,sp, val) %>%
dplyr::spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund
fticr_pore_relabundance_summary
fticr_pore_relabundance_summary2 = merge(fticr_pore_relabundance_summary, pore_relabund_dunnett2, by = c("tension","site","group","treatment"), all.x = TRUE)
fticr_pore_relabundance_summary2$relativeabundance = paste(fticr_pore_relabundance_summary2$relativeabundance,fticr_pore_relabundance_summary2$dunnett)
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(if_na(.),"")->
fticr_pore_relabundance_summary2
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"")->
fticr_pore_relabundance_summary2
fticr_pore_relabundance_summary2
view(fticr_pore_relabundance_summary2)
mutate(relativeabundance = paste(relativeabundance,dunnett)->
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
mutate(relativeabundance = paste(relativeabundance,dunnett))->
fticr_pore_relabundance_summary2
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relativeabundance,dunnett))->
fticr_pore_relabundance_summary2
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relativeabundance,dunnett))->
fticr_pore_relabundance_summary2
fticr_pore_relabundance_summary %>%
left_join(pore_relabund_dunnett2,by = c("tension","site","group","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relativeabundance,dunnett)) %>%
dplyr::select(-se,-sd, -ci, -dunnett,-N,)->
fticr_pore_relabundance_summary2
source("0-packages.R")
# input files
#   CHARAC
charac = read.csv(CHARACTERIZATION)# <- "processed/soil_characterization.csv"
pore = read.csv(PORE_DISTRIBUTION)# <- "processed/pore_distribution.csv"
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
wsoc_soil = read.csv(WSOC_SOIL)# <- "processed/wsoc_soils_summary.csv"
# FTICR_PORE
pore_aromatic = read.csv(FTICR_PORE_AROMATIC)# <- "fticr/fticr_pore_aromatic_counts.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_unique = read.csv(FTICR_PORE_UNIQUE)# <- "fticr/fticr_pore_uniquemolecules.csv"
pore_unique_peaks = read.csv(FTICR_PORE_UNIQUE_PEAKS)# <- "fticr/fticr_pore_unique_peakscount.csv"
pore_hcoc = read.csv(FTICR_PORE_HCOC)# <- "fticr/fticr_pore_hcoc.csv"
pore_nosc = read.csv(FTICR_PORE_NOSC)# <- "fticr/fticr_pore_nosc.csv"
#FTICR_SOIL
soil_aromatic = read.csv(FTICR_SOIL_AROMATIC)# <- "fticr/fticr_soil_aromatic_counts.csv"
soil_nosc = read.csv(FTICR_SOIL_NOSC)# <- "fticr/fticr_soil_nosc.csv"
soil_hcoc = read.csv(FTICR_SOIL_HCOC)# <- "fticr/fticr_soil_hcoc.csv"
soil_unique = read.csv(FTICR_SOIL_UNIQUE)# <- "fticr/fticr_soil_uniquemolecules.csv"
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
soil_peaks = read.csv(FTICR_SOIL_PEAKS)# <- "fticr/fticr_soil_peakscount.csv"
soil_unique_peaks = read.csv(FTICR_SOIL_UNIQUE_PEAKS)# <- "fticr/fticr_soil_unique_peakscount.csv"
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(site, treatment),
val = paste(peaks_count)) %>%
select(Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(site, treatment),
val = paste(peaks_count)) %>%
dplyr::select(Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
### OUTPUT
write_csv(fticr_pore_relabundance_summary2,FTICR_PORE_RELABUND)
source("0-packages.R")
# input files
#   CHARAC
charac = read.csv(CHARACTERIZATION)# <- "processed/soil_characterization.csv"
pore = read.csv(PORE_DISTRIBUTION)# <- "processed/pore_distribution.csv"
# WSOC
wsoc_pore = read.csv(WSOC_PORE)# <- "processed/wsoc_pore_summary.csv"
wsoc_soil = read.csv(WSOC_SOIL)# <- "processed/wsoc_soils_summary.csv"
# FTICR_PORE
pore_aromatic = read.csv(FTICR_PORE_AROMATIC)# <- "fticr/fticr_pore_aromatic_counts.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_unique = read.csv(FTICR_PORE_UNIQUE)# <- "fticr/fticr_pore_uniquemolecules.csv"
pore_unique_peaks = read.csv(FTICR_PORE_UNIQUE_PEAKS)# <- "fticr/fticr_pore_unique_peakscount.csv"
pore_hcoc = read.csv(FTICR_PORE_HCOC)# <- "fticr/fticr_pore_hcoc.csv"
pore_nosc = read.csv(FTICR_PORE_NOSC)# <- "fticr/fticr_pore_nosc.csv"
#FTICR_SOIL
soil_aromatic = read.csv(FTICR_SOIL_AROMATIC)# <- "fticr/fticr_soil_aromatic_counts.csv"
soil_nosc = read.csv(FTICR_SOIL_NOSC)# <- "fticr/fticr_soil_nosc.csv"
soil_hcoc = read.csv(FTICR_SOIL_HCOC)# <- "fticr/fticr_soil_hcoc.csv"
soil_unique = read.csv(FTICR_SOIL_UNIQUE)# <- "fticr/fticr_soil_uniquemolecules.csv"
soil_relabund = read.csv(FTICR_SOIL_RELABUND)# <- "fticr/fticr_soil_relabundance_hsd.csv"
soil_peaks = read.csv(FTICR_SOIL_PEAKS)# <- "fticr/fticr_soil_peakscount.csv"
soil_unique_peaks = read.csv(FTICR_SOIL_UNIQUE_PEAKS)# <- "fticr/fticr_soil_unique_peakscount.csv"
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("1.5 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
select(site, group,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_aromatic %>%
mutate(treatment = factor(treatment,
levels = c("baseline","time zero saturation", "field moist","saturation","drought")))->
pore_aromatic
## doing facet
ggplot(pore_aromatic,
aes(x = site, y = arom_core_counts, color = treatment, fill = treatment))+
geom_boxplot(position = "dodge", fill = "white", lwd = 1,fatten = 1)+ # fatten changes thickness of median line, lwd changes thickness of all lines
geom_dotplot(binaxis = "y",position = position_dodge(0.75),
stackdir = "center", dotsize = 0.4, color = "black")+
#scale_fill_viridis_d(option = "magma")+
#scale_color_viridis_d(option = "magma")+
scale_fill_brewer(palette = "Dark2")+
scale_color_brewer(palette = "Dark2")+
ylab("aromatic peaks")+
xlab("")+
ylim(0,350)+
geom_vline(xintercept = 1.5)+
geom_vline(xintercept = 2.5)+
#  facet_wrap(~tension)+
theme_bw()+
theme_kp()
