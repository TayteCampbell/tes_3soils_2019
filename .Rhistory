left_join(pore_relabund_dunnett,by = c("tension","site","Class","treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(relativeabundance = paste(relabund,dunnett)) %>%
dplyr::select(-relabund, -dunnett)->
fticr_pore_relabundance
### OUTPUT
write.csv(fticr_pore_relabundance, FTICR_PORE_RELABUND)
# PART V: SHANNON DIVERSITY ----
# Shannon diversity, H = - sum [p*ln(p)], where n = no. of individuals per species/total number of individuals
## a. for pores ----
pore_raw_long %>%
group_by(tension,site,treatment, core,Class) %>%
dplyr::summarize(n = n()) %>%
ungroup %>%
group_by(tension,site,treatment,core) %>%
dplyr::mutate(total = sum(n),
p = n/total,
log = log(p),
p_logp = p*log) %>%
dplyr::summarize(H1 = sum(p_logp),
H = round(-1*H1, 2)) %>%
dplyr::select(-H1)->pore_shannon
fit_dunnett_shannon_pore <- function(dat) {
d <-DescTools::DunnettTest(H~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(drought = d$`time zero saturation`["drought-time zero saturation",4],
saturation = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
pore_shannon_temp =
pore_shannon %>%
group_by(site,tension) %>%
do(fit_dunnett_shannon_pore(.)) %>%
melt(id = c("tension","site"), value.name = "dunnett", variable.name = "treatment")
pore_shannon_summary =
pore_shannon %>%
group_by(site, treatment, tension) %>%
dplyr::summarise(H_mean = (mean(H)),
H_se = sd(H)/sqrt(n())) %>%
left_join(pore_shannon_temp, by = c("site","treatment","tension"), all.x=TRUE)
### OUTPUT
write.csv(pore_shannon, FTICR_PORE_DIVERSITY)
write.csv(pore_shannon_summary, "fticr/pore_diversity_summary.csv")
pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
#
## 1b. process files for analysis ----
# we want relative abundance for each core
## pores ----
relabund_temp =
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = n()) %>% # sum all COUNTS for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)
relabund_pore =
relabund_temp %>%
dplyr::select(core, site, tension, treatment, Class, relabund) %>%
spread(Class, relabund) %>%
replace(is.na(.),0)
pore_relabund_pca=
relabund_temp %>%
ungroup %>%
dplyr::select(core,tension, site, treatment, Class, relabund) %>%
#filter(treatment=="time zero saturation") %>%
filter(tension=="50 kPa") %>%
spread(Class, relabund) %>%
replace(.,is.na(.),0)
pore_relabund_pca_num =
pore_relabund_pca %>%
dplyr::select(.,-(1:4))
pore_relabund_pca_grp =
pore_relabund_pca %>%
dplyr::select(.,(1:4)) %>%
dplyr::mutate(row = row_number())
pca = prcomp(pore_relabund_pca_num, scale. = T)
summary(pca)
ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = pore_relabund_pca_grp$site, ellipse = F, circle = F,
var.axes = TRUE)+
geom_point(size=2,stroke=2, aes(color = pore_relabund_pca_grp$treatment, shape = pore_relabund_pca_grp$site))+
geom_text(label = pore_relabund_pca_grp$core)+
scale_shape_manual(values = c(19,4,7))+
#facet_wrap(~groups)+
ggtitle("fine pores")
adonis(pore_relabund_pca_num ~ pore_relabund_pca$site+pore_relabund_pca$treatment+pore_relabund_pca$site:pore_relabund_pca$treatment,
method="bray", permutations=999)
pore_relabund_pca=
relabund_temp %>%
ungroup %>%
dplyr::select(core,tension, site, treatment, Class, relabund) %>%
#filter(treatment=="time zero saturation") %>%
filter(tension=="1.5 kPa") %>%
spread(Class, relabund) %>%
replace(.,is.na(.),0)
pore_relabund_pca_num =
pore_relabund_pca %>%
dplyr::select(.,-(1:4))
pore_relabund_pca_grp =
pore_relabund_pca %>%
dplyr::select(.,(1:4)) %>%
dplyr::mutate(row = row_number())
pca = prcomp(pore_relabund_pca_num, scale. = T)
summary(pca)
ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = pore_relabund_pca_grp$site, ellipse = F, circle = F,
var.axes = TRUE)+
geom_point(size=2,stroke=2, aes(color = pore_relabund_pca_grp$treatment, shape = pore_relabund_pca_grp$site))+
scale_shape_manual(values = c(19,4,7))+
geom_text(label = pore_relabund_pca_grp$core)+
#facet_wrap(~groups)+
ggtitle("coarse pores")
source("0b-packages.R")
# FTICR -- relative abundance files
pore_relabund = read.csv(FTICR_PORE_RELABUND)# <- "fticr/fticr_pore_relabundance_groups2_hsd.csv"
View(pore_relabund)
pore_peaks = read.csv(FTICR_PORE_PEAKS)# <- "fticr/fticr_pore_peakscount.csv"
pore_peaks %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar","Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other","total")))->
pore_peaks
print("50 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("1.5 kPa")
pore_peaks %>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
print("50 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
total = 100%
```{r relabund_1, echo=FALSE, warning=FALSE,message=FALSE,fig.cap="relabund 1.5 kPa"}
print("1.5 kPa")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_shannon_summary %>%
dplyr::mutate(H = paste(round(H_mean,2), "\U00B1", round(H_se,2), dunnett),
H = str_replace_all(H, "NA",""),
var = paste(tension, site)) %>%
dplyr::select(treatment, var, H) %>%
spread(var, H) %>%
knitr::kable()
pore_shannon_summary = read.csv("fticr/pore_diversity_summary.csv")
pore_shannon_summary %>%
dplyr::mutate(H = paste(round(H_mean,2), "\U00B1", round(H_se,2), dunnett),
H = str_replace_all(H, "NA",""),
var = paste(tension, site)) %>%
dplyr::select(treatment, var, H) %>%
spread(var, H) %>%
knitr::kable()
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_peaks %>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
filter(Class=="total") %>%
knitr::kable(align = "r")
pore_peaks %>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(sp = paste(treatment),
val = paste(peaks_count)) %>%
dplyr::select(site,Class,sp, val) %>%
spread(sp, val) %>%
filter(Class=="total") %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="50 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other"))) %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other")))
pore_relabund%>%
ungroup %>%
filter(tension=="1.5 kPa") %>%
dplyr::mutate(Class = factor(Class, levels =
c("AminoSugar", "Carb","Lipid","Protein","UnsatHC",
"ConHC","Lignin","Tannin","Other"))) %>%
dplyr::mutate(sp = paste(treatment),
val = paste(relativeabundance)) %>%
dplyr::select(site, Class,sp, val) %>%
spread(sp, val) %>%
knitr::kable(align = "r")
source("0-packages.R")
source("0-packages.R")
source("0b-packages.R")
soil_character = read_excel("data/soil_character.xlsx")
View(soil_character)
soil_character %>%
dplyr::mutate_at(c(4:20), as.numeric())
soil_char = read_excel("data/soil_character.xlsx")
soil_character  =
soil_char %>%
dplyr::select(-c(1:3))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_all(funs(as.numeric()))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_all(funs(as.factor())) %>%
dplyr::mutate_all(funs(as.numeric()))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.numeric(as.factor))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor)
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate_if(is.factor, as.numeric)
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate_if(is.factor, as.numeric) %>%
left_join(dplyr::select(soil_char, c(1:3)))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate_if(is.factor, as.numeric) %>%
cnind(dplyr::select(soil_char, c(1:3)))
soil_character  =
soil_char %>%
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate_if(is.factor, as.numeric) %>%
cbind(dplyr::select(soil_char, c(1:3)))
soil_character  =
soil_char %>%
# remove the grouping variables
# then make all the variables numeric
dplyr::select(-c(1:3)) %>%
dplyr::mutate_if(is.character, as.factor) %>%
dplyr::mutate_if(is.factor, as.numeric) %>%
# now bring back the original grouping variables
cbind(dplyr::select(soil_char, c(1:3)))
soil_character %>%
dplyr::rename(site=Soil) %>%
select(site,
TC_perc, TN_perc, TOC_perc, WSOC_mg_g,
Ca_meq100g, Mg_meq100g,
pH, EC_dS_m,
Sand_perc, Silt_perc, Clay_perc)->
soil_character2
soil_character %>%
dplyr::rename(site=Soil) %>%
dplyr::select(site,
TC_perc, TN_perc, TOC_perc, WSOC_mg_g,
Ca_meq100g, Mg_meq100g,
pH, EC_dS_m,
Sand_perc, Silt_perc, Clay_perc)->
soil_character2
View(soil_character2)
# gather
soil_character2 %>%
gather(variable, value, 2:12) %>%
mutate(value = round(value,2)) %>%
mutate(variable = factor(variable, levels = c("TC_perc", "TN_perc", "TOC_perc", "WSOC_mg_g",
"Ca_meq100g", "Mg_meq100g",
"pH", "EC_dS_m",
"Sand_perc", "Silt_perc", "Clay_perc"))) %>%
drop_na()->
soil_character2_long
soil_character2_long %>%
group_by(site, variable) %>%
dplyr::summarise(mean = mean(value),
se = sd(value)/sqrt(n())) %>%
dplyr::mutate(summary = paste(round(mean,2), "\u00B1",round(se,2)))->
soil_character_summary
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/6-characterization.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/6-characterization.R', echo=TRUE)
warnings()
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/6-characterization.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/6-characterization.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/7-wsoc.R', echo=TRUE)
# 2.  WSOC concentrations -- pores ----
## 2a. step 1: concentrations as mg/L ----
wsoc_pores_temp = read_excel("data/3Soils_WSOC_CN_PoreCore.xlsx")
wsoc_pores_temp %>%
dplyr::rename(wsoc_mg_L = `Water Soluble Organic Carbon (mg/L)`) %>%
dplyr::select(-FTICR_ID, -`FT-ICRvol_ml`, -`Pore Size Domain`, -`NPOC (M/L)`,-SampleID) %>%
#rename and reorder factors in Treatment
dplyr::mutate(Treatment = factor(Treatment,
levels = c("Time Zero Saturation",
"Field Moisture Incubation",
"Saturation Incubation",
"Drought Incubation"),
labels = c("Time Zero",
"Field Moist",
"Saturated",
"Drought")))->
wsoc_pores
fit_dunnett_wsoc <- function(dat) {
d <-DescTools::DunnettTest(wsoc_mg_L~Treatment, control = "Time Zero", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`Drought` = d$`Time Zero`["Drought-Time Zero",4],
`Saturated` = d$`Time Zero`["Saturated-Time Zero",4],
`Field Moist` = d$`Time Zero`["Field Moist-Time Zero",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
wsoc_pores_wt %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.)) %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett
View(wsoc_pores_wt)
View(wsoc_pores)
wsoc_pores %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.)) %>%
gather(Treatment, dunnett, 3:5)-> #gather columns 4-7 (treatment levels)
wsoc_pores_dunnett
### merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))  %>%
dplyr::select(-dunnett, -wsoc_mgL_mean_se) %>%
dplyr::rename(wsoc_mgg = wsoc_mgg_mean_se)->
wsoc_pores_summary
View(wsoc_soils_summary)
View(wsoc_pores_dunnett)
wsoc_pores %>%
group_by(Site, Suction) %>%
do(fit_dunnett_wsoc(.))
View(wsoc_pores_wt)
# create summary table
wsoc_pores %>%
filter(!is.na(wsoc_mg_L)) %>%
group_by(Suction,Site, Treatment) %>%
# make summary columns for mg/L and mg/g values
dplyr::summarize(wsoc_mgL_mean = mean(wsoc_mg_L, na.rm = TRUE),
mgL_se = sd(wsoc_mg_L)/sqrt(n())) %>%
dplyr::mutate(wsoc_mgL_mean_se = paste(round(wsoc_mgL_mean,2),"\u00B1",round(mgL_se,2))) %>%
ungroup %>%
dplyr::select(Site,Treatment,Suction,wsoc_mgL_mean, wsoc_mgL_mean_se)->
wsoc_pores_summary
View(wsoc_pores_summary)
## 2d. merge the summary table with the hsd/dunnett table ----
wsoc_pores_summary %>%
left_join(wsoc_pores_dunnett,by = c("Site","Suction","Treatment"), all.x = TRUE) %>%
replace(.,is.na(.),"") %>%
dplyr::mutate(wsoc_mgL = paste(wsoc_mgL_mean_se,dunnett))  %>%
dplyr::select(-dunnett, -wsoc_mgL_mean_se) ->
wsoc_pores_summary
View(wsoc_pores_summary)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/7-wsoc.R', echo=TRUE)
## b. unique to each site ---- pores ----
fticr_pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_longform.csv"
source("0b-packages.R")
## b. unique to each site ---- pores ----
fticr_pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_longform.csv"
fticr_pore_meta = read.csv(FTICR_PORE_META)
unique_pore_temp =
fticr_pore_raw_long %>%
#  filter(reps==5) %>%
group_by(Mass, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
filter(treatment=="time zero saturation") %>%
group_by(Mass,tension) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
unique_pore =
unique_pore_temp %>%
filter(reps==1)
View(unique_pore)
common_pore =
unique_pore_temp %>%
filter(reps>1)
View(common_pore)
gg_vankrev(unique_pore, aes(x = OC, y = HC, color = site))+facet_wrap(~tension)
gg_vankrev(unique_pore_temp, aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_wrap(tension~reps)+
theme_kp()
gg_vankrev(molform[molform$treatment=="time zero saturation",], aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_wrap(treatment+tension~reps)
molform =
fticr_pore_raw_long %>%
left_join(molform_temp, by = "Mass") %>%
group_by(MolForm, core, site, treatment, tension) %>%
dplyr::summarise() %>%
group_by(MolForm, site, treatment, tension) %>%
dplyr::summarise(reps=n()) %>%
left_join(dplyr::select(molform_temp, MolForm, HC, OC), by = "MolForm")
molform_temp =
molform_temp %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
unique_pore_temp =
fticr_pore_raw_long %>%
#  filter(reps==5) %>%
group_by(Mass, tension, site,  treatment) %>%
dplyr::summarize(presence=1) %>%
#filter(treatment=="time zero saturation") %>%
group_by(Mass,tension, treatment) %>%
dplyr::mutate(reps=sum(presence)) %>%
left_join(dplyr::select(fticr_pore_meta, Mass, HC, OC), by = "Mass")
# trying to track molecules. only peaks that were initially unique to each site are plotted across the treatments
# not sure if this even makes sense. remove?
temp =
unique_pore_temp %>%
dplyr::mutate(remove=case_when((treatment=="time zero saturation" & reps==1)~"keep")) %>%
ungroup %>%
dplyr::select(Mass, tension, site, remove) %>%
na.omit()
unique_pore_temp =
unique_pore_temp %>%
left_join(temp,  by = c("Mass","tension","site"))
gg_vankrev(unique_pore_temp, aes(x = OC, y = HC, color = site))+
scale_color_manual(values = c("blue","yellow","red"))+
facet_grid(treatment~reps)
source("0b-packages.R")
soil_meta = read.csv(FTICR_SOIL_META)# <- "fticr/fticr_soil_meta.csv"
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/8-fticr_processing.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/8-fticr_processing.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/9-fticr_abundance.R', echo=TRUE)
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/9-fticr_abundance.R', echo=TRUE)
soil_relabund_temp[!soil_relabund_temp$Class=="total",] %>%
group_by(site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
soil_relabund_dunnett
source('~/OneDrive - PNNL/Documents/GitHub/3soils_kp/tes_3soils_2019/9-fticr_abundance.R', echo=TRUE)
