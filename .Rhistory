# PART III: SOIL AROMATIC PEAKS ----
meta_aromatic <- pore_meta %>%
dplyr::select(Mass, AImod) %>%
dplyr::rename(AI_Mod = AImod)
View(meta_aromatic)
pore_raw_long %>%
left_join(meta_aromatic, by = "Mass") %>%
# create a column designating aromatic  vs. aliphatic
# aromatic == AI_Mod > 0.5, aliphatic == 1.5 < HC < 2.0
# see Bailey et al. 2017 SBB, Chasse et al. 2015 for references
dplyr::mutate(aromatic = case_when(AI_Mod>0.5 ~ "aromatic",
(HC<2.0 & HC>1.5) ~ "aliphatic"))  ->
pore_aromatic
View(pore_aromatic)
pore_aromatic %>%
drop_na %>%
group_by(tension,site, treatment, core, aromatic) %>%
dplyr::summarize(counts = n())->
pore_aromatic_counts
View(pore_aromatic_counts)
### OUTPUT
# write.csv(fticr_soil_aromatic_counts,"fticr_soil_aromatic_counts.csv")
write_csv(pore_aromatic_counts, FTICR_PORE_AROMATIC)
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
View(relabund_temp)
relabund_temp%>%
# now summarize by treatment. combine cores
ungroup %>%
dplyr::group_by(tension,site, treatment, Class) %>%
dplyr::summarize(relabund2 = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
# create a column of relabund +/- se
dplyr::mutate(relabund = paste(round(relabund2,2),"\u00B1",round(se,2))) %>%
# we need to add a total column
dplyr::mutate(total = 100) %>%
dplyr::select(-se,-relabund2) %>%
# we need to bring the total column into the Class.
# so first spread the class column and then melt back together
spread(Class, relabund) %>%
melt(id = c("site","treatment")) %>%
dplyr::rename(Class = variable,
relabund= value)->
pore_relabund
View(pore_relabund)
relabund_temp%>%
# now summarize by treatment. combine cores
ungroup %>%
dplyr::group_by(tension,site, treatment, Class) %>%
dplyr::summarize(relabund2 = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
# create a column of relabund +/- se
dplyr::mutate(relabund = paste(round(relabund2,2),"\u00B1",round(se,2))) %>%
# we need to add a total column
dplyr::mutate(total = 100) %>%
dplyr::select(-se,-relabund2) %>%
# we need to bring the total column into the Class.
# so first spread the class column and then melt back together
spread(Class, relabund) %>%
melt(id = c("tension","site","treatment")) %>%
dplyr::rename(Class = variable,
relabund= value)->
pore_relabund
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "baseline", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
View(relabund_temp)
View(pore_relabund)
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = relabund_temp)
d
d
d$`time zero saturation`
d$`time zero saturation`["drought-time zero saturation",4]
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:4) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
t
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
t
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
d$`time zero saturation`["saturation-time zero saturation",4]
d
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
d
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = relabund_temp[relabund_temp$site=="SR",])
d
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
t
t %>% gather(trt, pval,1:3)->t2
t2
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.)) %>%
melt(id = c("tension","site","Class"), value.name = "dunnett", variable.name = "treatment")-> #gather columns 4-7 (treatment levels)
pore_relabund_dunnett
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp %>%
group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
group_by(site, Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site, Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
View(temp)
names(relabund_temp)
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(site,tension,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
dplyr::group_by(tension) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
View(temp)
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp_pore
relabund_temp_pore[!relabund_temp_pore$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
t
relabund_temp[relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp# %>%
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[!relabund_temp$group=="total",] %>%
group_by(site, tension, Class) %>%
do(fit_dunnett_relabund(.))  ->
pore_relabund_dunnett
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[relabund_temp$Class=="total",] %>%
group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[relabund_temp$Class=="total",] %>%
group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
relabund_temp[relabund_temp$Class=="total",] %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
source("0-packages.R")
soil_meta = read.csv(FTICR_SOIL_META)# <- "fticr/fticr_soil_meta.csv"
#FTICR_SOIL_META_HCOC <- "fticr/soil_meta_hcoc.csv"
soil_raw_long = read.csv(FTICR_SOIL_RAW_LONG)# <- "fticr/fticr_soil_raw_longform.csv"
soil_long = read.csv(FTICR_SOIL_LONG)# <- "fticr/fticr_soil_longform.csv"
pore_meta = read.csv(FTICR_PORE_META)# <- "fticr/fticr_pore_meta.csv"
pore_long = read.csv(FTICR_PORE_LONG)# <- "fticr/fticr_pore_longform.csv"
pore_raw_long = read.csv(FTICR_PORE_RAW_LONG)# <- "fticr/fticr_pore_raw_longform.csv"
View(pore_raw_long)
pore_raw_long %>%
group_by(tension,site, treatment,Class,core) %>%
dplyr::summarize(compounds = sum(intensity)) %>% # sum all intensities for each Class
# now calculate relative abundance for each Class for each core
group_by(tension,site, treatment, core) %>%
dplyr::mutate(total = sum(compounds),
relabund = (compounds/total)*100)->
relabund_temp
relabund_temp%>%
# now summarize by treatment. combine cores
ungroup %>%
dplyr::group_by(tension,site, treatment, Class) %>%
dplyr::summarize(relabund2 = mean(relabund),
se = sd(relabund)/sqrt(n())) %>%
# create a column of relabund +/- se
dplyr::mutate(relabund = paste(round(relabund2,2),"\u00B1",round(se,2))) %>%
# we need to add a total column
dplyr::mutate(total = 100) %>%
dplyr::select(-se,-relabund2) %>%
# we need to bring the total column into the Class.
# so first spread the class column and then melt back together
spread(Class, relabund) %>%
melt(id = c("tension","site","treatment")) %>%
dplyr::rename(Class = variable,
relabund= value)->
pore_relabund
fit_dunnett_relabund <- function(dat) {
d <-DescTools::DunnettTest(relabund~treatment, control = "time zero saturation", data = dat)
#create a tibble with one column for each treatment
# column 4 has the pvalue
t = tibble(`drought` = d$`time zero saturation`["drought-time zero saturation",4],
`saturation` = d$`time zero saturation`["saturation-time zero saturation",4],
`field moist` = d$`time zero saturation`["field moist-time zero saturation",4])
# we need to convert significant p values to asterisks
# since the values are in a single row, it is tricky
t %>%
# first, gather all p-values into a single column, pval
gather(trt, pval, 1:3) %>%
# conditionally replace all significant pvalues (p<0.05) with asterisks and the rest remain blank
dplyr::mutate(p = if_else(pval<0.05, "*","")) %>%
# remove the pval column
dplyr::select(-pval) %>%
# spread the p (asterisks) column bnack into the three columns
spread(trt, p)  ->
t
}
relabund_temp[relabund_temp$Class=="total",] %>%
ungroup %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
View(relabund_temp)
relabund_temp[!relabund_temp$Class=="total",] %>%
ungroup %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
relabund_temp %>%
ungroup %>%
dplyr::group_by(tension,site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
ungroup %>%
dplyr::mutate(tension_site = paste(tension,site)) %>%
dplyr::group_by(tension_site,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
relabund_temp[!relabund_temp$Class=="total",] %>%
ungroup %>%
dplyr::group_by(tension,Class) %>%
do(fit_dunnett_relabund(.))-> temp # %>%
View(temp)
str(relabund_temp)
install.packages(c("classInt", "covr", "data.table", "drake", "KernSmooth", "purrr", "txtq"))
